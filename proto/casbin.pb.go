// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: proto/casbin.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleCls    string `protobuf:"bytes,1,opt,name=roleCls,proto3" json:"roleCls,omitempty"`
	UserOrRole string `protobuf:"bytes,2,opt,name=userOrRole,proto3" json:"userOrRole,omitempty"`
	Permission string `protobuf:"bytes,3,opt,name=permission,proto3" json:"permission,omitempty"`
	Object     string `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
	Effect     string `protobuf:"bytes,5,opt,name=effect,proto3" json:"effect,omitempty"`
}

func (x *EmPolicy) Reset() {
	*x = EmPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmPolicy) ProtoMessage() {}

func (x *EmPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmPolicy.ProtoReflect.Descriptor instead.
func (*EmPolicy) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{0}
}

func (x *EmPolicy) GetRoleCls() string {
	if x != nil {
		return x.RoleCls
	}
	return ""
}

func (x *EmPolicy) GetUserOrRole() string {
	if x != nil {
		return x.UserOrRole
	}
	return ""
}

func (x *EmPolicy) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *EmPolicy) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *EmPolicy) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

type EmGroupPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child         string `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	ChildRoleCls  string `protobuf:"bytes,2,opt,name=childRoleCls,proto3" json:"childRoleCls,omitempty"`
	Parent        string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	ParentRoleCls string `protobuf:"bytes,4,opt,name=parentRoleCls,proto3" json:"parentRoleCls,omitempty"`
}

func (x *EmGroupPolicy) Reset() {
	*x = EmGroupPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmGroupPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmGroupPolicy) ProtoMessage() {}

func (x *EmGroupPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmGroupPolicy.ProtoReflect.Descriptor instead.
func (*EmGroupPolicy) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{1}
}

func (x *EmGroupPolicy) GetChild() string {
	if x != nil {
		return x.Child
	}
	return ""
}

func (x *EmGroupPolicy) GetChildRoleCls() string {
	if x != nil {
		return x.ChildRoleCls
	}
	return ""
}

func (x *EmGroupPolicy) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *EmGroupPolicy) GetParentRoleCls() string {
	if x != nil {
		return x.ParentRoleCls
	}
	return ""
}

type PermissionUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies      []*EmPolicy      `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	GroupPolicies []*EmGroupPolicy `protobuf:"bytes,2,rep,name=groupPolicies,proto3" json:"groupPolicies,omitempty"`
}

func (x *PermissionUnit) Reset() {
	*x = PermissionUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionUnit) ProtoMessage() {}

func (x *PermissionUnit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionUnit.ProtoReflect.Descriptor instead.
func (*PermissionUnit) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{2}
}

func (x *PermissionUnit) GetPolicies() []*EmPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *PermissionUnit) GetGroupPolicies() []*EmGroupPolicy {
	if x != nil {
		return x.GroupPolicies
	}
	return nil
}

type PermissionUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName   string          `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain         string          `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	PermissionUnit *PermissionUnit `protobuf:"bytes,3,opt,name=permissionUnit,proto3" json:"permissionUnit,omitempty"`
}

func (x *PermissionUnitRequest) Reset() {
	*x = PermissionUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionUnitRequest) ProtoMessage() {}

func (x *PermissionUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionUnitRequest.ProtoReflect.Descriptor instead.
func (*PermissionUnitRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{3}
}

func (x *PermissionUnitRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *PermissionUnitRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PermissionUnitRequest) GetPermissionUnit() *PermissionUnit {
	if x != nil {
		return x.PermissionUnit
	}
	return nil
}

type PermissionUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName    string            `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain          string            `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	PermissionUnits []*PermissionUnit `protobuf:"bytes,3,rep,name=permissionUnits,proto3" json:"permissionUnits,omitempty"`
}

func (x *PermissionUnitsRequest) Reset() {
	*x = PermissionUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionUnitsRequest) ProtoMessage() {}

func (x *PermissionUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionUnitsRequest.ProtoReflect.Descriptor instead.
func (*PermissionUnitsRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{4}
}

func (x *PermissionUnitsRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *PermissionUnitsRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PermissionUnitsRequest) GetPermissionUnits() []*PermissionUnit {
	if x != nil {
		return x.PermissionUnits
	}
	return nil
}

type PermissionUnitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissionUnit *PermissionUnit `protobuf:"bytes,1,opt,name=permissionUnit,proto3" json:"permissionUnit,omitempty"`
}

func (x *PermissionUnitReply) Reset() {
	*x = PermissionUnitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionUnitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionUnitReply) ProtoMessage() {}

func (x *PermissionUnitReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionUnitReply.ProtoReflect.Descriptor instead.
func (*PermissionUnitReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{5}
}

func (x *PermissionUnitReply) GetPermissionUnit() *PermissionUnit {
	if x != nil {
		return x.PermissionUnit
	}
	return nil
}

type PermissionUnitsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissionUnits []*PermissionUnit `protobuf:"bytes,1,rep,name=permissionUnits,proto3" json:"permissionUnits,omitempty"`
}

func (x *PermissionUnitsReply) Reset() {
	*x = PermissionUnitsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionUnitsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionUnitsReply) ProtoMessage() {}

func (x *PermissionUnitsReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionUnitsReply.ProtoReflect.Descriptor instead.
func (*PermissionUnitsReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{6}
}

func (x *PermissionUnitsReply) GetPermissionUnits() []*PermissionUnit {
	if x != nil {
		return x.PermissionUnits
	}
	return nil
}

type PermissionUnitV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	RoleCls     string   `protobuf:"bytes,2,opt,name=role_cls,json=roleCls,proto3" json:"role_cls,omitempty"`
	Role        string   `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Permissions []string `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Object      string   `protobuf:"bytes,5,opt,name=object,proto3" json:"object,omitempty"`
	Effect      string   `protobuf:"bytes,6,opt,name=effect,proto3" json:"effect,omitempty"`
}

func (x *PermissionUnitV2) Reset() {
	*x = PermissionUnitV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionUnitV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionUnitV2) ProtoMessage() {}

func (x *PermissionUnitV2) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionUnitV2.ProtoReflect.Descriptor instead.
func (*PermissionUnitV2) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{7}
}

func (x *PermissionUnitV2) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PermissionUnitV2) GetRoleCls() string {
	if x != nil {
		return x.RoleCls
	}
	return ""
}

func (x *PermissionUnitV2) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *PermissionUnitV2) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *PermissionUnitV2) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *PermissionUnitV2) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

type PermissionUnitV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName     string            `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain           string            `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	PermissionUnitV2 *PermissionUnitV2 `protobuf:"bytes,3,opt,name=permissionUnitV2,proto3" json:"permissionUnitV2,omitempty"`
	CheckExistFlag   bool              `protobuf:"varint,4,opt,name=checkExistFlag,proto3" json:"checkExistFlag,omitempty"`
}

func (x *PermissionUnitV2Request) Reset() {
	*x = PermissionUnitV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionUnitV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionUnitV2Request) ProtoMessage() {}

func (x *PermissionUnitV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionUnitV2Request.ProtoReflect.Descriptor instead.
func (*PermissionUnitV2Request) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{8}
}

func (x *PermissionUnitV2Request) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *PermissionUnitV2Request) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PermissionUnitV2Request) GetPermissionUnitV2() *PermissionUnitV2 {
	if x != nil {
		return x.PermissionUnitV2
	}
	return nil
}

func (x *PermissionUnitV2Request) GetCheckExistFlag() bool {
	if x != nil {
		return x.CheckExistFlag
	}
	return false
}

type PermissionUnitsV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName      string              `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain            string              `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	PermissionUnitsV2 []*PermissionUnitV2 `protobuf:"bytes,3,rep,name=permissionUnitsV2,proto3" json:"permissionUnitsV2,omitempty"`
	CheckExistFlag    bool                `protobuf:"varint,4,opt,name=checkExistFlag,proto3" json:"checkExistFlag,omitempty"`
}

func (x *PermissionUnitsV2Request) Reset() {
	*x = PermissionUnitsV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionUnitsV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionUnitsV2Request) ProtoMessage() {}

func (x *PermissionUnitsV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionUnitsV2Request.ProtoReflect.Descriptor instead.
func (*PermissionUnitsV2Request) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{9}
}

func (x *PermissionUnitsV2Request) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *PermissionUnitsV2Request) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PermissionUnitsV2Request) GetPermissionUnitsV2() []*PermissionUnitV2 {
	if x != nil {
		return x.PermissionUnitsV2
	}
	return nil
}

func (x *PermissionUnitsV2Request) GetCheckExistFlag() bool {
	if x != nil {
		return x.CheckExistFlag
	}
	return false
}

type PermissionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies                []*EmPolicy      `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	UserOrRoleGroupPolicies []*EmGroupPolicy `protobuf:"bytes,2,rep,name=userOrRoleGroupPolicies,proto3" json:"userOrRoleGroupPolicies,omitempty"`
	ObjectGroupPolicies     []*EmGroupPolicy `protobuf:"bytes,3,rep,name=objectGroupPolicies,proto3" json:"objectGroupPolicies,omitempty"`
}

func (x *PermissionInfo) Reset() {
	*x = PermissionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionInfo) ProtoMessage() {}

func (x *PermissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionInfo.ProtoReflect.Descriptor instead.
func (*PermissionInfo) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{10}
}

func (x *PermissionInfo) GetPolicies() []*EmPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *PermissionInfo) GetUserOrRoleGroupPolicies() []*EmGroupPolicy {
	if x != nil {
		return x.UserOrRoleGroupPolicies
	}
	return nil
}

func (x *PermissionInfo) GetObjectGroupPolicies() []*EmGroupPolicy {
	if x != nil {
		return x.ObjectGroupPolicies
	}
	return nil
}

type PermissionInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissionInfo *PermissionInfo `protobuf:"bytes,1,opt,name=permissionInfo,proto3" json:"permissionInfo,omitempty"`
}

func (x *PermissionInfoReply) Reset() {
	*x = PermissionInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionInfoReply) ProtoMessage() {}

func (x *PermissionInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionInfoReply.ProtoReflect.Descriptor instead.
func (*PermissionInfoReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{11}
}

func (x *PermissionInfoReply) GetPermissionInfo() *PermissionInfo {
	if x != nil {
		return x.PermissionInfo
	}
	return nil
}

type RolePermissionUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleCls               string                   `protobuf:"bytes,1,opt,name=role_cls,json=roleCls,proto3" json:"role_cls,omitempty"`
	Role                  string                   `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	PermissionsWithObject []*PermissionsWithObject `protobuf:"bytes,3,rep,name=permissionsWithObject,proto3" json:"permissionsWithObject,omitempty"`
	Effect                string                   `protobuf:"bytes,4,opt,name=effect,proto3" json:"effect,omitempty"`
}

func (x *RolePermissionUnit) Reset() {
	*x = RolePermissionUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolePermissionUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePermissionUnit) ProtoMessage() {}

func (x *RolePermissionUnit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePermissionUnit.ProtoReflect.Descriptor instead.
func (*RolePermissionUnit) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{12}
}

func (x *RolePermissionUnit) GetRoleCls() string {
	if x != nil {
		return x.RoleCls
	}
	return ""
}

func (x *RolePermissionUnit) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RolePermissionUnit) GetPermissionsWithObject() []*PermissionsWithObject {
	if x != nil {
		return x.PermissionsWithObject
	}
	return nil
}

func (x *RolePermissionUnit) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

type RolePermissionUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName       string              `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain             string              `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	RolePermissionUnit *RolePermissionUnit `protobuf:"bytes,3,opt,name=rolePermissionUnit,proto3" json:"rolePermissionUnit,omitempty"`
	Replace            bool                `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (x *RolePermissionUnitRequest) Reset() {
	*x = RolePermissionUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolePermissionUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePermissionUnitRequest) ProtoMessage() {}

func (x *RolePermissionUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePermissionUnitRequest.ProtoReflect.Descriptor instead.
func (*RolePermissionUnitRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{13}
}

func (x *RolePermissionUnitRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *RolePermissionUnitRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RolePermissionUnitRequest) GetRolePermissionUnit() *RolePermissionUnit {
	if x != nil {
		return x.RolePermissionUnit
	}
	return nil
}

func (x *RolePermissionUnitRequest) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

type RolePermissionUnitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *RolePermissionUnitReply) Reset() {
	*x = RolePermissionUnitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolePermissionUnitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePermissionUnitReply) ProtoMessage() {}

func (x *RolePermissionUnitReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePermissionUnitReply.ProtoReflect.Descriptor instead.
func (*RolePermissionUnitReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{14}
}

func (x *RolePermissionUnitReply) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type GroupPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string         `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string         `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	GroupPolicy  *EmGroupPolicy `protobuf:"bytes,3,opt,name=groupPolicy,proto3" json:"groupPolicy,omitempty"`
}

func (x *GroupPolicyRequest) Reset() {
	*x = GroupPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupPolicyRequest) ProtoMessage() {}

func (x *GroupPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupPolicyRequest.ProtoReflect.Descriptor instead.
func (*GroupPolicyRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{15}
}

func (x *GroupPolicyRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *GroupPolicyRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GroupPolicyRequest) GetGroupPolicy() *EmGroupPolicy {
	if x != nil {
		return x.GroupPolicy
	}
	return nil
}

type GroupPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName  string           `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain        string           `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	GroupPolicies []*EmGroupPolicy `protobuf:"bytes,3,rep,name=groupPolicies,proto3" json:"groupPolicies,omitempty"`
}

func (x *GroupPoliciesRequest) Reset() {
	*x = GroupPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupPoliciesRequest) ProtoMessage() {}

func (x *GroupPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupPoliciesRequest.ProtoReflect.Descriptor instead.
func (*GroupPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{16}
}

func (x *GroupPoliciesRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *GroupPoliciesRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GroupPoliciesRequest) GetGroupPolicies() []*EmGroupPolicy {
	if x != nil {
		return x.GroupPolicies
	}
	return nil
}

type AclSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	User         string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Permission   string `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"`
	ObjectCls    string `protobuf:"bytes,5,opt,name=objectCls,proto3" json:"objectCls,omitempty"`
	Object       string `protobuf:"bytes,6,opt,name=object,proto3" json:"object,omitempty"`
	ObjectGroup  string `protobuf:"bytes,7,opt,name=objectGroup,proto3" json:"objectGroup,omitempty"`
}

func (x *AclSearchRequest) Reset() {
	*x = AclSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclSearchRequest) ProtoMessage() {}

func (x *AclSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclSearchRequest.ProtoReflect.Descriptor instead.
func (*AclSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{17}
}

func (x *AclSearchRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *AclSearchRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *AclSearchRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AclSearchRequest) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *AclSearchRequest) GetObjectCls() string {
	if x != nil {
		return x.ObjectCls
	}
	return ""
}

func (x *AclSearchRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *AclSearchRequest) GetObjectGroup() string {
	if x != nil {
		return x.ObjectGroup
	}
	return ""
}

type UserPermissionObjectPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Permission string `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
	Object     string `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *UserPermissionObjectPair) Reset() {
	*x = UserPermissionObjectPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPermissionObjectPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermissionObjectPair) ProtoMessage() {}

func (x *UserPermissionObjectPair) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermissionObjectPair.ProtoReflect.Descriptor instead.
func (*UserPermissionObjectPair) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{18}
}

func (x *UserPermissionObjectPair) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UserPermissionObjectPair) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

func (x *UserPermissionObjectPair) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

type BatchAclSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string                      `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string                      `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Pairs        []*UserPermissionObjectPair `protobuf:"bytes,3,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *BatchAclSearchRequest) Reset() {
	*x = BatchAclSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAclSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAclSearchRequest) ProtoMessage() {}

func (x *BatchAclSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAclSearchRequest.ProtoReflect.Descriptor instead.
func (*BatchAclSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{19}
}

func (x *BatchAclSearchRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *BatchAclSearchRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *BatchAclSearchRequest) GetPairs() []*UserPermissionObjectPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type AclSearchExRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName           string   `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain                 string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	User                   string   `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Permissions            []string `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions,omitempty"`
	ObjectCls              string   `protobuf:"bytes,5,opt,name=objectCls,proto3" json:"objectCls,omitempty"`
	Object                 string   `protobuf:"bytes,6,opt,name=object,proto3" json:"object,omitempty"`
	Objects                []string `protobuf:"bytes,7,rep,name=objects,proto3" json:"objects,omitempty"`
	ObjectGroup            string   `protobuf:"bytes,8,opt,name=objectGroup,proto3" json:"objectGroup,omitempty"`
	SearchChildObjectsFlag bool     `protobuf:"varint,9,opt,name=searchChildObjectsFlag,proto3" json:"searchChildObjectsFlag,omitempty"`
	ReverseObjectsFlag     bool     `protobuf:"varint,10,opt,name=reverseObjectsFlag,proto3" json:"reverseObjectsFlag,omitempty"`
}

func (x *AclSearchExRequest) Reset() {
	*x = AclSearchExRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclSearchExRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclSearchExRequest) ProtoMessage() {}

func (x *AclSearchExRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclSearchExRequest.ProtoReflect.Descriptor instead.
func (*AclSearchExRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{20}
}

func (x *AclSearchExRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *AclSearchExRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *AclSearchExRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AclSearchExRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *AclSearchExRequest) GetObjectCls() string {
	if x != nil {
		return x.ObjectCls
	}
	return ""
}

func (x *AclSearchExRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *AclSearchExRequest) GetObjects() []string {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *AclSearchExRequest) GetObjectGroup() string {
	if x != nil {
		return x.ObjectGroup
	}
	return ""
}

func (x *AclSearchExRequest) GetSearchChildObjectsFlag() bool {
	if x != nil {
		return x.SearchChildObjectsFlag
	}
	return false
}

func (x *AclSearchExRequest) GetReverseObjectsFlag() bool {
	if x != nil {
		return x.ReverseObjectsFlag
	}
	return false
}

type AclSearchForObjectTreesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName       string   `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain             string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	User               string   `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Permissions        []string `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Object             string   `protobuf:"bytes,5,opt,name=object,proto3" json:"object,omitempty"`
	ReverseObjectsFlag bool     `protobuf:"varint,6,opt,name=reverseObjectsFlag,proto3" json:"reverseObjectsFlag,omitempty"`
	ObjectClsPatterns  []string `protobuf:"bytes,7,rep,name=objectClsPatterns,proto3" json:"objectClsPatterns,omitempty"`
}

func (x *AclSearchForObjectTreesRequest) Reset() {
	*x = AclSearchForObjectTreesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclSearchForObjectTreesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclSearchForObjectTreesRequest) ProtoMessage() {}

func (x *AclSearchForObjectTreesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclSearchForObjectTreesRequest.ProtoReflect.Descriptor instead.
func (*AclSearchForObjectTreesRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{21}
}

func (x *AclSearchForObjectTreesRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *AclSearchForObjectTreesRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *AclSearchForObjectTreesRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AclSearchForObjectTreesRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *AclSearchForObjectTreesRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *AclSearchForObjectTreesRequest) GetReverseObjectsFlag() bool {
	if x != nil {
		return x.ReverseObjectsFlag
	}
	return false
}

func (x *AclSearchForObjectTreesRequest) GetObjectClsPatterns() []string {
	if x != nil {
		return x.ObjectClsPatterns
	}
	return nil
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{22}
}

func (x *EmptyRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *EmptyRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type EmptyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReply) Reset() {
	*x = EmptyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReply) ProtoMessage() {}

func (x *EmptyReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReply.ProtoReflect.Descriptor instead.
func (*EmptyReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{23}
}

type BoolReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res bool `protobuf:"varint,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *BoolReply) Reset() {
	*x = BoolReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolReply) ProtoMessage() {}

func (x *BoolReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolReply.ProtoReflect.Descriptor instead.
func (*BoolReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{24}
}

func (x *BoolReply) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

type BoolArrayReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res []bool `protobuf:"varint,1,rep,packed,name=res,proto3" json:"res,omitempty"`
}

func (x *BoolArrayReply) Reset() {
	*x = BoolArrayReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolArrayReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolArrayReply) ProtoMessage() {}

func (x *BoolArrayReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolArrayReply.ProtoReflect.Descriptor instead.
func (*BoolArrayReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{25}
}

func (x *BoolArrayReply) GetRes() []bool {
	if x != nil {
		return x.Res
	}
	return nil
}

type IntReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res int32 `protobuf:"varint,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *IntReply) Reset() {
	*x = IntReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntReply) ProtoMessage() {}

func (x *IntReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntReply.ProtoReflect.Descriptor instead.
func (*IntReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{26}
}

func (x *IntReply) GetRes() int32 {
	if x != nil {
		return x.Res
	}
	return 0
}

type ArrayReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Array []string `protobuf:"bytes,1,rep,name=array,proto3" json:"array,omitempty"`
}

func (x *ArrayReply) Reset() {
	*x = ArrayReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayReply) ProtoMessage() {}

func (x *ArrayReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayReply.ProtoReflect.Descriptor instead.
func (*ArrayReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{27}
}

func (x *ArrayReply) GetArray() []string {
	if x != nil {
		return x.Array
	}
	return nil
}

type RoleSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	User         string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	RoleCls      string `protobuf:"bytes,4,opt,name=roleCls,proto3" json:"roleCls,omitempty"`
	ObjectCls    string `protobuf:"bytes,5,opt,name=objectCls,proto3" json:"objectCls,omitempty"`
	Object       string `protobuf:"bytes,6,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *RoleSearchRequest) Reset() {
	*x = RoleSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleSearchRequest) ProtoMessage() {}

func (x *RoleSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleSearchRequest.ProtoReflect.Descriptor instead.
func (*RoleSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{28}
}

func (x *RoleSearchRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *RoleSearchRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RoleSearchRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *RoleSearchRequest) GetRoleCls() string {
	if x != nil {
		return x.RoleCls
	}
	return ""
}

func (x *RoleSearchRequest) GetObjectCls() string {
	if x != nil {
		return x.ObjectCls
	}
	return ""
}

func (x *RoleSearchRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

type UserOrRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	UserOrRole   string `protobuf:"bytes,3,opt,name=userOrRole,proto3" json:"userOrRole,omitempty"`
}

func (x *UserOrRoleRequest) Reset() {
	*x = UserOrRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrRoleRequest) ProtoMessage() {}

func (x *UserOrRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrRoleRequest.ProtoReflect.Descriptor instead.
func (*UserOrRoleRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{29}
}

func (x *UserOrRoleRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *UserOrRoleRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UserOrRoleRequest) GetUserOrRole() string {
	if x != nil {
		return x.UserOrRole
	}
	return ""
}

type UsersOrRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string   `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	UsersOrRoles []string `protobuf:"bytes,3,rep,name=usersOrRoles,proto3" json:"usersOrRoles,omitempty"`
}

func (x *UsersOrRolesRequest) Reset() {
	*x = UsersOrRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersOrRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersOrRolesRequest) ProtoMessage() {}

func (x *UsersOrRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersOrRolesRequest.ProtoReflect.Descriptor instead.
func (*UsersOrRolesRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{30}
}

func (x *UsersOrRolesRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *UsersOrRolesRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UsersOrRolesRequest) GetUsersOrRoles() []string {
	if x != nil {
		return x.UsersOrRoles
	}
	return nil
}

type UserOrRoleWithPatternRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName          string   `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain                string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	UserOrRole            string   `protobuf:"bytes,3,opt,name=userOrRole,proto3" json:"userOrRole,omitempty"`
	UserOrRoleClsPatterns []string `protobuf:"bytes,4,rep,name=userOrRoleClsPatterns,proto3" json:"userOrRoleClsPatterns,omitempty"`
}

func (x *UserOrRoleWithPatternRequest) Reset() {
	*x = UserOrRoleWithPatternRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrRoleWithPatternRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrRoleWithPatternRequest) ProtoMessage() {}

func (x *UserOrRoleWithPatternRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrRoleWithPatternRequest.ProtoReflect.Descriptor instead.
func (*UserOrRoleWithPatternRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{31}
}

func (x *UserOrRoleWithPatternRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *UserOrRoleWithPatternRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UserOrRoleWithPatternRequest) GetUserOrRole() string {
	if x != nil {
		return x.UserOrRole
	}
	return ""
}

func (x *UserOrRoleWithPatternRequest) GetUserOrRoleClsPatterns() []string {
	if x != nil {
		return x.UserOrRoleClsPatterns
	}
	return nil
}

type UserOrRoleWithFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName               string `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain                     string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	UserOrRole                 string `protobuf:"bytes,3,opt,name=userOrRole,proto3" json:"userOrRole,omitempty"`
	SearchChildObjectsFlag     bool   `protobuf:"varint,4,opt,name=searchChildObjectsFlag,proto3" json:"searchChildObjectsFlag,omitempty"`
	MaxSearchChildObjectsLevel int32  `protobuf:"varint,5,opt,name=maxSearchChildObjectsLevel,proto3" json:"maxSearchChildObjectsLevel,omitempty"`
}

func (x *UserOrRoleWithFlagRequest) Reset() {
	*x = UserOrRoleWithFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrRoleWithFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrRoleWithFlagRequest) ProtoMessage() {}

func (x *UserOrRoleWithFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrRoleWithFlagRequest.ProtoReflect.Descriptor instead.
func (*UserOrRoleWithFlagRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{32}
}

func (x *UserOrRoleWithFlagRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *UserOrRoleWithFlagRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UserOrRoleWithFlagRequest) GetUserOrRole() string {
	if x != nil {
		return x.UserOrRole
	}
	return ""
}

func (x *UserOrRoleWithFlagRequest) GetSearchChildObjectsFlag() bool {
	if x != nil {
		return x.SearchChildObjectsFlag
	}
	return false
}

func (x *UserOrRoleWithFlagRequest) GetMaxSearchChildObjectsLevel() int32 {
	if x != nil {
		return x.MaxSearchChildObjectsLevel
	}
	return 0
}

type ObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Object       string `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *ObjectRequest) Reset() {
	*x = ObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectRequest) ProtoMessage() {}

func (x *ObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectRequest.ProtoReflect.Descriptor instead.
func (*ObjectRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{33}
}

func (x *ObjectRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *ObjectRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ObjectRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

type ObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string   `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Objects      []string `protobuf:"bytes,3,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *ObjectsRequest) Reset() {
	*x = ObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectsRequest) ProtoMessage() {}

func (x *ObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectsRequest.ProtoReflect.Descriptor instead.
func (*ObjectsRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{34}
}

func (x *ObjectsRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *ObjectsRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ObjectsRequest) GetObjects() []string {
	if x != nil {
		return x.Objects
	}
	return nil
}

type ObjectWithPatternRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName      string   `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain            string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Object            string   `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	ObjectClsPatterns []string `protobuf:"bytes,4,rep,name=objectClsPatterns,proto3" json:"objectClsPatterns,omitempty"`
}

func (x *ObjectWithPatternRequest) Reset() {
	*x = ObjectWithPatternRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectWithPatternRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectWithPatternRequest) ProtoMessage() {}

func (x *ObjectWithPatternRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectWithPatternRequest.ProtoReflect.Descriptor instead.
func (*ObjectWithPatternRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{35}
}

func (x *ObjectWithPatternRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *ObjectWithPatternRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ObjectWithPatternRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ObjectWithPatternRequest) GetObjectClsPatterns() []string {
	if x != nil {
		return x.ObjectClsPatterns
	}
	return nil
}

type ObjectWithFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName                    string `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain                          string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Object                          string `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	SearchChildUsersOrRolesFlag     bool   `protobuf:"varint,4,opt,name=searchChildUsersOrRolesFlag,proto3" json:"searchChildUsersOrRolesFlag,omitempty"`
	MaxSearchChildUsersOrRolesLevel int32  `protobuf:"varint,5,opt,name=maxSearchChildUsersOrRolesLevel,proto3" json:"maxSearchChildUsersOrRolesLevel,omitempty"`
}

func (x *ObjectWithFlagRequest) Reset() {
	*x = ObjectWithFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectWithFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectWithFlagRequest) ProtoMessage() {}

func (x *ObjectWithFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectWithFlagRequest.ProtoReflect.Descriptor instead.
func (*ObjectWithFlagRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{36}
}

func (x *ObjectWithFlagRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *ObjectWithFlagRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ObjectWithFlagRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ObjectWithFlagRequest) GetSearchChildUsersOrRolesFlag() bool {
	if x != nil {
		return x.SearchChildUsersOrRolesFlag
	}
	return false
}

func (x *ObjectWithFlagRequest) GetMaxSearchChildUsersOrRolesLevel() int32 {
	if x != nil {
		return x.MaxSearchChildUsersOrRolesLevel
	}
	return 0
}

type UserOrRoleAndObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	UserOrRole   string `protobuf:"bytes,3,opt,name=userOrRole,proto3" json:"userOrRole,omitempty"`
	Object       string `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *UserOrRoleAndObjectRequest) Reset() {
	*x = UserOrRoleAndObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrRoleAndObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrRoleAndObjectRequest) ProtoMessage() {}

func (x *UserOrRoleAndObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrRoleAndObjectRequest.ProtoReflect.Descriptor instead.
func (*UserOrRoleAndObjectRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{37}
}

func (x *UserOrRoleAndObjectRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *UserOrRoleAndObjectRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UserOrRoleAndObjectRequest) GetUserOrRole() string {
	if x != nil {
		return x.UserOrRole
	}
	return ""
}

func (x *UserOrRoleAndObjectRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

type ReplacePermissionInfoForUserOrRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName  string `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain        string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	OldUserOrRole string `protobuf:"bytes,3,opt,name=oldUserOrRole,proto3" json:"oldUserOrRole,omitempty"`
	NewUserOrRole string `protobuf:"bytes,4,opt,name=newUserOrRole,proto3" json:"newUserOrRole,omitempty"`
}

func (x *ReplacePermissionInfoForUserOrRoleRequest) Reset() {
	*x = ReplacePermissionInfoForUserOrRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplacePermissionInfoForUserOrRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplacePermissionInfoForUserOrRoleRequest) ProtoMessage() {}

func (x *ReplacePermissionInfoForUserOrRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplacePermissionInfoForUserOrRoleRequest.ProtoReflect.Descriptor instead.
func (*ReplacePermissionInfoForUserOrRoleRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{38}
}

func (x *ReplacePermissionInfoForUserOrRoleRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *ReplacePermissionInfoForUserOrRoleRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ReplacePermissionInfoForUserOrRoleRequest) GetOldUserOrRole() string {
	if x != nil {
		return x.OldUserOrRole
	}
	return ""
}

func (x *ReplacePermissionInfoForUserOrRoleRequest) GetNewUserOrRole() string {
	if x != nil {
		return x.NewUserOrRole
	}
	return ""
}

type GroupPoliciesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupPolicies []*EmGroupPolicy `protobuf:"bytes,3,rep,name=groupPolicies,proto3" json:"groupPolicies,omitempty"`
}

func (x *GroupPoliciesReply) Reset() {
	*x = GroupPoliciesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupPoliciesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupPoliciesReply) ProtoMessage() {}

func (x *GroupPoliciesReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupPoliciesReply.ProtoReflect.Descriptor instead.
func (*GroupPoliciesReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{39}
}

func (x *GroupPoliciesReply) GetGroupPolicies() []*EmGroupPolicy {
	if x != nil {
		return x.GroupPolicies
	}
	return nil
}

type GroupPoliciesWithRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root          string           `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	GroupPolicies []*EmGroupPolicy `protobuf:"bytes,3,rep,name=groupPolicies,proto3" json:"groupPolicies,omitempty"`
}

func (x *GroupPoliciesWithRoot) Reset() {
	*x = GroupPoliciesWithRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupPoliciesWithRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupPoliciesWithRoot) ProtoMessage() {}

func (x *GroupPoliciesWithRoot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupPoliciesWithRoot.ProtoReflect.Descriptor instead.
func (*GroupPoliciesWithRoot) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{40}
}

func (x *GroupPoliciesWithRoot) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *GroupPoliciesWithRoot) GetGroupPolicies() []*EmGroupPolicy {
	if x != nil {
		return x.GroupPolicies
	}
	return nil
}

type GroupPoliciesWithRootListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupPoliciesWithRootList []*GroupPoliciesWithRoot `protobuf:"bytes,1,rep,name=groupPoliciesWithRootList,proto3" json:"groupPoliciesWithRootList,omitempty"`
}

func (x *GroupPoliciesWithRootListReply) Reset() {
	*x = GroupPoliciesWithRootListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupPoliciesWithRootListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupPoliciesWithRootListReply) ProtoMessage() {}

func (x *GroupPoliciesWithRootListReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupPoliciesWithRootListReply.ProtoReflect.Descriptor instead.
func (*GroupPoliciesWithRootListReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{41}
}

func (x *GroupPoliciesWithRootListReply) GetGroupPoliciesWithRootList() []*GroupPoliciesWithRoot {
	if x != nil {
		return x.GroupPoliciesWithRootList
	}
	return nil
}

type PermissionsWithObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object      string   `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Permissions []string `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *PermissionsWithObject) Reset() {
	*x = PermissionsWithObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsWithObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsWithObject) ProtoMessage() {}

func (x *PermissionsWithObject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsWithObject.ProtoReflect.Descriptor instead.
func (*PermissionsWithObject) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{42}
}

func (x *PermissionsWithObject) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *PermissionsWithObject) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type PermissionsWithObjectListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissionsWithObjectList []*PermissionsWithObject `protobuf:"bytes,1,rep,name=permissionsWithObjectList,proto3" json:"permissionsWithObjectList,omitempty"`
}

func (x *PermissionsWithObjectListReply) Reset() {
	*x = PermissionsWithObjectListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsWithObjectListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsWithObjectListReply) ProtoMessage() {}

func (x *PermissionsWithObjectListReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsWithObjectListReply.ProtoReflect.Descriptor instead.
func (*PermissionsWithObjectListReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{43}
}

func (x *PermissionsWithObjectListReply) GetPermissionsWithObjectList() []*PermissionsWithObject {
	if x != nil {
		return x.PermissionsWithObjectList
	}
	return nil
}

type DomainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName                   string                                          `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain                         string                                          `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	ObjectClsOfRoleClsMap          map[string]*DomainConfig_PermissionsOfObjectCls `protobuf:"bytes,3,rep,name=objectClsOfRoleClsMap,proto3" json:"objectClsOfRoleClsMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GetObjectClsFromObjectFuncName string                                          `protobuf:"bytes,4,opt,name=getObjectClsFromObjectFuncName,proto3" json:"getObjectClsFromObjectFuncName,omitempty"`
	GetRoleClsFromRoleFuncName     string                                          `protobuf:"bytes,5,opt,name=getRoleClsFromRoleFuncName,proto3" json:"getRoleClsFromRoleFuncName,omitempty"`
}

func (x *DomainConfig) Reset() {
	*x = DomainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainConfig) ProtoMessage() {}

func (x *DomainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainConfig.ProtoReflect.Descriptor instead.
func (*DomainConfig) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{44}
}

func (x *DomainConfig) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *DomainConfig) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainConfig) GetObjectClsOfRoleClsMap() map[string]*DomainConfig_PermissionsOfObjectCls {
	if x != nil {
		return x.ObjectClsOfRoleClsMap
	}
	return nil
}

func (x *DomainConfig) GetGetObjectClsFromObjectFuncName() string {
	if x != nil {
		return x.GetObjectClsFromObjectFuncName
	}
	return ""
}

func (x *DomainConfig) GetGetRoleClsFromRoleFuncName() string {
	if x != nil {
		return x.GetRoleClsFromRoleFuncName
	}
	return ""
}

type DomainConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string        `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string        `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	DomainConfig *DomainConfig `protobuf:"bytes,3,opt,name=domainConfig,proto3" json:"domainConfig,omitempty"`
}

func (x *DomainConfigRequest) Reset() {
	*x = DomainConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainConfigRequest) ProtoMessage() {}

func (x *DomainConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainConfigRequest.ProtoReflect.Descriptor instead.
func (*DomainConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{45}
}

func (x *DomainConfigRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *DomainConfigRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainConfigRequest) GetDomainConfig() *DomainConfig {
	if x != nil {
		return x.DomainConfig
	}
	return nil
}

type DomainConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainConfig *DomainConfig `protobuf:"bytes,1,opt,name=domainConfig,proto3" json:"domainConfig,omitempty"`
}

func (x *DomainConfigReply) Reset() {
	*x = DomainConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainConfigReply) ProtoMessage() {}

func (x *DomainConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainConfigReply.ProtoReflect.Descriptor instead.
func (*DomainConfigReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{46}
}

func (x *DomainConfigReply) GetDomainConfig() *DomainConfig {
	if x != nil {
		return x.DomainConfig
	}
	return nil
}

type TokenAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Domain       string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Permission   string `protobuf:"bytes,4,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *TokenAccess) Reset() {
	*x = TokenAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAccess) ProtoMessage() {}

func (x *TokenAccess) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAccess.ProtoReflect.Descriptor instead.
func (*TokenAccess) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{47}
}

func (x *TokenAccess) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *TokenAccess) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenAccess) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TokenAccess) GetPermission() string {
	if x != nil {
		return x.Permission
	}
	return ""
}

type TokenAccessListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenAccessList []*TokenAccess `protobuf:"bytes,1,rep,name=tokenAccessList,proto3" json:"tokenAccessList,omitempty"`
}

func (x *TokenAccessListReply) Reset() {
	*x = TokenAccessListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAccessListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAccessListReply) ProtoMessage() {}

func (x *TokenAccessListReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAccessListReply.ProtoReflect.Descriptor instead.
func (*TokenAccessListReply) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{48}
}

func (x *TokenAccessListReply) GetTokenAccessList() []*TokenAccess {
	if x != nil {
		return x.TokenAccessList
	}
	return nil
}

type TokenAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnforcerName string       `protobuf:"bytes,1,opt,name=enforcerName,proto3" json:"enforcerName,omitempty"`
	Domain       string       `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	TokenAccess  *TokenAccess `protobuf:"bytes,3,opt,name=tokenAccess,proto3" json:"tokenAccess,omitempty"`
}

func (x *TokenAccessRequest) Reset() {
	*x = TokenAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAccessRequest) ProtoMessage() {}

func (x *TokenAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAccessRequest.ProtoReflect.Descriptor instead.
func (*TokenAccessRequest) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{49}
}

func (x *TokenAccessRequest) GetEnforcerName() string {
	if x != nil {
		return x.EnforcerName
	}
	return ""
}

func (x *TokenAccessRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TokenAccessRequest) GetTokenAccess() *TokenAccess {
	if x != nil {
		return x.TokenAccess
	}
	return nil
}

type DomainConfig_PermissionsOfObjectCls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissionsOfObjectClsMap map[string]*DomainConfig_PermissionList `protobuf:"bytes,1,rep,name=permissionsOfObjectClsMap,proto3" json:"permissionsOfObjectClsMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DomainConfig_PermissionsOfObjectCls) Reset() {
	*x = DomainConfig_PermissionsOfObjectCls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainConfig_PermissionsOfObjectCls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainConfig_PermissionsOfObjectCls) ProtoMessage() {}

func (x *DomainConfig_PermissionsOfObjectCls) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainConfig_PermissionsOfObjectCls.ProtoReflect.Descriptor instead.
func (*DomainConfig_PermissionsOfObjectCls) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{44, 0}
}

func (x *DomainConfig_PermissionsOfObjectCls) GetPermissionsOfObjectClsMap() map[string]*DomainConfig_PermissionList {
	if x != nil {
		return x.PermissionsOfObjectClsMap
	}
	return nil
}

type DomainConfig_PermissionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *DomainConfig_PermissionList) Reset() {
	*x = DomainConfig_PermissionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_casbin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainConfig_PermissionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainConfig_PermissionList) ProtoMessage() {}

func (x *DomainConfig_PermissionList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_casbin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainConfig_PermissionList.ProtoReflect.Descriptor instead.
func (*DomainConfig_PermissionList) Descriptor() ([]byte, []int) {
	return file_proto_casbin_proto_rawDescGZIP(), []int{44, 1}
}

func (x *DomainConfig_PermissionList) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

var File_proto_casbin_proto protoreflect.FileDescriptor

var file_proto_casbin_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x08,
	0x45, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x43, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x43,
	0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x45, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x22, 0x79, 0x0a, 0x0e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2b,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3d, 0x0a,
	0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x95, 0x01, 0x0a,
	0x16, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x57, 0x0a, 0x14, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0xc2, 0x01,
	0x0a, 0x17, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x32, 0x52, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x22, 0xc5, 0x01, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x56, 0x32,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x32, 0x52,
	0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x56, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xd5, 0x01, 0x0a, 0x0e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x17, 0x75, 0x73,
	0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x13, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x22, 0x54, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x52, 0x6f, 0x6c,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x52,
	0x0a, 0x15, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x15, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x52,
	0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x12, 0x72, 0x6f, 0x6c,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x52, 0x6f, 0x6c,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x66, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x35, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x12, 0x41, 0x63, 0x6c, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x88, 0x02, 0x0a, 0x1e, 0x41, 0x63,
	0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6c, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x22, 0x0c, 0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d,
	0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x22, 0x0a,
	0x0e, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65,
	0x73, 0x22, 0x1c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22,
	0x22, 0x0a, 0x0a, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x43, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x43, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x6f, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x75, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x22, 0xb0, 0x01, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x75,
	0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x63, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x66, 0x0a, 0x0e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c,
	0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x48, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x90, 0x01, 0x0a,
	0x1a, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0xb3, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x50, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0x7c, 0x0a, 0x1e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x51,
	0x0a, 0x15, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x7c, 0x0a, 0x1e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xf9, 0x05, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x64, 0x0a, 0x15,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x6c, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x4d,
	0x61, 0x70, 0x12, 0x46, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6c, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x67, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x67, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6c, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x94, 0x02, 0x0a, 0x16, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6c, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73,
	0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6c, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x1a,
	0x70, 0x0a, 0x1e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x66,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x32, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x74, 0x0a, 0x1a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6c, 0x73, 0x4f, 0x66, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x13,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x37, 0x0a, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4c, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a,
	0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7f, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x14, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3c, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x01,
	0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x34, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xd3, 0x25, 0x0a, 0x06, 0x43, 0x61, 0x73, 0x62, 0x69,
	0x6e, 0x12, 0x4f, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x15, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x32, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x56, 0x32, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x56,
	0x32, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x56, 0x32, 0x12,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x34, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x56, 0x32, 0x41, 0x6e,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x30, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x56, 0x32, 0x41, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x74, 0x0a, 0x22, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x12, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x45, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x72, 0x65, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x72, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45,
	0x78, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x12, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6c, 0x73, 0x12, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x6f,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46,
	0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x49, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x49, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x19, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x08, 0x49, 0x73, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x0a, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x12,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x17, 0x41,
	0x64, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x42, 0x0a, 0x16,
	0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0b, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa,
	0x02, 0x0e, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x4f, 0x72, 0x67, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_casbin_proto_rawDescOnce sync.Once
	file_proto_casbin_proto_rawDescData = file_proto_casbin_proto_rawDesc
)

func file_proto_casbin_proto_rawDescGZIP() []byte {
	file_proto_casbin_proto_rawDescOnce.Do(func() {
		file_proto_casbin_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_casbin_proto_rawDescData)
	})
	return file_proto_casbin_proto_rawDescData
}

var file_proto_casbin_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_proto_casbin_proto_goTypes = []interface{}{
	(*EmPolicy)(nil),                                  // 0: proto.EmPolicy
	(*EmGroupPolicy)(nil),                             // 1: proto.EmGroupPolicy
	(*PermissionUnit)(nil),                            // 2: proto.PermissionUnit
	(*PermissionUnitRequest)(nil),                     // 3: proto.PermissionUnitRequest
	(*PermissionUnitsRequest)(nil),                    // 4: proto.PermissionUnitsRequest
	(*PermissionUnitReply)(nil),                       // 5: proto.PermissionUnitReply
	(*PermissionUnitsReply)(nil),                      // 6: proto.PermissionUnitsReply
	(*PermissionUnitV2)(nil),                          // 7: proto.PermissionUnitV2
	(*PermissionUnitV2Request)(nil),                   // 8: proto.PermissionUnitV2Request
	(*PermissionUnitsV2Request)(nil),                  // 9: proto.PermissionUnitsV2Request
	(*PermissionInfo)(nil),                            // 10: proto.PermissionInfo
	(*PermissionInfoReply)(nil),                       // 11: proto.PermissionInfoReply
	(*RolePermissionUnit)(nil),                        // 12: proto.RolePermissionUnit
	(*RolePermissionUnitRequest)(nil),                 // 13: proto.RolePermissionUnitRequest
	(*RolePermissionUnitReply)(nil),                   // 14: proto.RolePermissionUnitReply
	(*GroupPolicyRequest)(nil),                        // 15: proto.GroupPolicyRequest
	(*GroupPoliciesRequest)(nil),                      // 16: proto.GroupPoliciesRequest
	(*AclSearchRequest)(nil),                          // 17: proto.AclSearchRequest
	(*UserPermissionObjectPair)(nil),                  // 18: proto.UserPermissionObjectPair
	(*BatchAclSearchRequest)(nil),                     // 19: proto.BatchAclSearchRequest
	(*AclSearchExRequest)(nil),                        // 20: proto.AclSearchExRequest
	(*AclSearchForObjectTreesRequest)(nil),            // 21: proto.AclSearchForObjectTreesRequest
	(*EmptyRequest)(nil),                              // 22: proto.EmptyRequest
	(*EmptyReply)(nil),                                // 23: proto.EmptyReply
	(*BoolReply)(nil),                                 // 24: proto.BoolReply
	(*BoolArrayReply)(nil),                            // 25: proto.BoolArrayReply
	(*IntReply)(nil),                                  // 26: proto.IntReply
	(*ArrayReply)(nil),                                // 27: proto.ArrayReply
	(*RoleSearchRequest)(nil),                         // 28: proto.RoleSearchRequest
	(*UserOrRoleRequest)(nil),                         // 29: proto.UserOrRoleRequest
	(*UsersOrRolesRequest)(nil),                       // 30: proto.UsersOrRolesRequest
	(*UserOrRoleWithPatternRequest)(nil),              // 31: proto.UserOrRoleWithPatternRequest
	(*UserOrRoleWithFlagRequest)(nil),                 // 32: proto.UserOrRoleWithFlagRequest
	(*ObjectRequest)(nil),                             // 33: proto.ObjectRequest
	(*ObjectsRequest)(nil),                            // 34: proto.ObjectsRequest
	(*ObjectWithPatternRequest)(nil),                  // 35: proto.ObjectWithPatternRequest
	(*ObjectWithFlagRequest)(nil),                     // 36: proto.ObjectWithFlagRequest
	(*UserOrRoleAndObjectRequest)(nil),                // 37: proto.UserOrRoleAndObjectRequest
	(*ReplacePermissionInfoForUserOrRoleRequest)(nil), // 38: proto.ReplacePermissionInfoForUserOrRoleRequest
	(*GroupPoliciesReply)(nil),                        // 39: proto.GroupPoliciesReply
	(*GroupPoliciesWithRoot)(nil),                     // 40: proto.GroupPoliciesWithRoot
	(*GroupPoliciesWithRootListReply)(nil),            // 41: proto.GroupPoliciesWithRootListReply
	(*PermissionsWithObject)(nil),                     // 42: proto.PermissionsWithObject
	(*PermissionsWithObjectListReply)(nil),            // 43: proto.PermissionsWithObjectListReply
	(*DomainConfig)(nil),                              // 44: proto.DomainConfig
	(*DomainConfigRequest)(nil),                       // 45: proto.DomainConfigRequest
	(*DomainConfigReply)(nil),                         // 46: proto.DomainConfigReply
	(*TokenAccess)(nil),                               // 47: proto.TokenAccess
	(*TokenAccessListReply)(nil),                      // 48: proto.TokenAccessListReply
	(*TokenAccessRequest)(nil),                        // 49: proto.TokenAccessRequest
	(*DomainConfig_PermissionsOfObjectCls)(nil),       // 50: proto.DomainConfig.PermissionsOfObjectCls
	(*DomainConfig_PermissionList)(nil),               // 51: proto.DomainConfig.PermissionList
	nil,                                               // 52: proto.DomainConfig.ObjectClsOfRoleClsMapEntry
	nil,                                               // 53: proto.DomainConfig.PermissionsOfObjectCls.PermissionsOfObjectClsMapEntry
}
var file_proto_casbin_proto_depIdxs = []int32{
	0,  // 0: proto.PermissionUnit.policies:type_name -> proto.EmPolicy
	1,  // 1: proto.PermissionUnit.groupPolicies:type_name -> proto.EmGroupPolicy
	2,  // 2: proto.PermissionUnitRequest.permissionUnit:type_name -> proto.PermissionUnit
	2,  // 3: proto.PermissionUnitsRequest.permissionUnits:type_name -> proto.PermissionUnit
	2,  // 4: proto.PermissionUnitReply.permissionUnit:type_name -> proto.PermissionUnit
	2,  // 5: proto.PermissionUnitsReply.permissionUnits:type_name -> proto.PermissionUnit
	7,  // 6: proto.PermissionUnitV2Request.permissionUnitV2:type_name -> proto.PermissionUnitV2
	7,  // 7: proto.PermissionUnitsV2Request.permissionUnitsV2:type_name -> proto.PermissionUnitV2
	0,  // 8: proto.PermissionInfo.policies:type_name -> proto.EmPolicy
	1,  // 9: proto.PermissionInfo.userOrRoleGroupPolicies:type_name -> proto.EmGroupPolicy
	1,  // 10: proto.PermissionInfo.objectGroupPolicies:type_name -> proto.EmGroupPolicy
	10, // 11: proto.PermissionInfoReply.permissionInfo:type_name -> proto.PermissionInfo
	42, // 12: proto.RolePermissionUnit.permissionsWithObject:type_name -> proto.PermissionsWithObject
	12, // 13: proto.RolePermissionUnitRequest.rolePermissionUnit:type_name -> proto.RolePermissionUnit
	1,  // 14: proto.GroupPolicyRequest.groupPolicy:type_name -> proto.EmGroupPolicy
	1,  // 15: proto.GroupPoliciesRequest.groupPolicies:type_name -> proto.EmGroupPolicy
	18, // 16: proto.BatchAclSearchRequest.pairs:type_name -> proto.UserPermissionObjectPair
	1,  // 17: proto.GroupPoliciesReply.groupPolicies:type_name -> proto.EmGroupPolicy
	1,  // 18: proto.GroupPoliciesWithRoot.groupPolicies:type_name -> proto.EmGroupPolicy
	40, // 19: proto.GroupPoliciesWithRootListReply.groupPoliciesWithRootList:type_name -> proto.GroupPoliciesWithRoot
	42, // 20: proto.PermissionsWithObjectListReply.permissionsWithObjectList:type_name -> proto.PermissionsWithObject
	52, // 21: proto.DomainConfig.objectClsOfRoleClsMap:type_name -> proto.DomainConfig.ObjectClsOfRoleClsMapEntry
	44, // 22: proto.DomainConfigRequest.domainConfig:type_name -> proto.DomainConfig
	44, // 23: proto.DomainConfigReply.domainConfig:type_name -> proto.DomainConfig
	47, // 24: proto.TokenAccessListReply.tokenAccessList:type_name -> proto.TokenAccess
	47, // 25: proto.TokenAccessRequest.tokenAccess:type_name -> proto.TokenAccess
	53, // 26: proto.DomainConfig.PermissionsOfObjectCls.permissionsOfObjectClsMap:type_name -> proto.DomainConfig.PermissionsOfObjectCls.PermissionsOfObjectClsMapEntry
	50, // 27: proto.DomainConfig.ObjectClsOfRoleClsMapEntry.value:type_name -> proto.DomainConfig.PermissionsOfObjectCls
	51, // 28: proto.DomainConfig.PermissionsOfObjectCls.PermissionsOfObjectClsMapEntry.value:type_name -> proto.DomainConfig.PermissionList
	3,  // 29: proto.Casbin.AddPermissionUnit:input_type -> proto.PermissionUnitRequest
	4,  // 30: proto.Casbin.AddPermissionUnits:input_type -> proto.PermissionUnitsRequest
	3,  // 31: proto.Casbin.RemovePermissionUnit:input_type -> proto.PermissionUnitRequest
	4,  // 32: proto.Casbin.RemovePermissionUnits:input_type -> proto.PermissionUnitsRequest
	8,  // 33: proto.Casbin.AddPermissionUnitV2:input_type -> proto.PermissionUnitV2Request
	9,  // 34: proto.Casbin.AddPermissionUnitsV2:input_type -> proto.PermissionUnitsV2Request
	8,  // 35: proto.Casbin.RemovePermissionUnitV2:input_type -> proto.PermissionUnitV2Request
	9,  // 36: proto.Casbin.RemovePermissionUnitsV2:input_type -> proto.PermissionUnitsV2Request
	29, // 37: proto.Casbin.RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole:input_type -> proto.UserOrRoleRequest
	33, // 38: proto.Casbin.RemovePermissionUnitsV2AndGroupPoliciesForObject:input_type -> proto.ObjectRequest
	32, // 39: proto.Casbin.GetPermissionInfoForUserOrRole:input_type -> proto.UserOrRoleWithFlagRequest
	36, // 40: proto.Casbin.GetPermissionInfoForObject:input_type -> proto.ObjectWithFlagRequest
	37, // 41: proto.Casbin.GetPermissionInfoForUserOrRoleAndObject:input_type -> proto.UserOrRoleAndObjectRequest
	38, // 42: proto.Casbin.ReplacePermissionInfoForUserOrRole:input_type -> proto.ReplacePermissionInfoForUserOrRoleRequest
	17, // 43: proto.Casbin.GetObjectsForUserWithPermission:input_type -> proto.AclSearchRequest
	20, // 44: proto.Casbin.GetObjectsForUserWithPermissionsEx:input_type -> proto.AclSearchExRequest
	21, // 45: proto.Casbin.GetObjectTreesForUserWithPermissions:input_type -> proto.AclSearchForObjectTreesRequest
	17, // 46: proto.Casbin.GetPermissionsForUserWithObject:input_type -> proto.AclSearchRequest
	20, // 47: proto.Casbin.GetPermissionsForUserWithObjectsEx:input_type -> proto.AclSearchExRequest
	17, // 48: proto.Casbin.GetUsersOrRolesForObjectWithPermission:input_type -> proto.AclSearchRequest
	17, // 49: proto.Casbin.CheckPermission:input_type -> proto.AclSearchRequest
	19, // 50: proto.Casbin.BatchCheckPermission:input_type -> proto.BatchAclSearchRequest
	28, // 51: proto.Casbin.GetObjectsForUserWithRoleCls:input_type -> proto.RoleSearchRequest
	28, // 52: proto.Casbin.GetRolesForUserWithObject:input_type -> proto.RoleSearchRequest
	28, // 53: proto.Casbin.GetUsersOrRolesForObjectWithRoleCls:input_type -> proto.RoleSearchRequest
	28, // 54: proto.Casbin.CheckRole:input_type -> proto.RoleSearchRequest
	15, // 55: proto.Casbin.AddUserOrRoleForUserOrRole:input_type -> proto.GroupPolicyRequest
	16, // 56: proto.Casbin.AddUsersOrRolesForUsersOrRoles:input_type -> proto.GroupPoliciesRequest
	15, // 57: proto.Casbin.RemoveUserOrRoleForUserOrRole:input_type -> proto.GroupPolicyRequest
	16, // 58: proto.Casbin.RemoveUsersOrRolesForUsersOrRoles:input_type -> proto.GroupPoliciesRequest
	29, // 59: proto.Casbin.GetUsersOrRolesForUserOrRole:input_type -> proto.UserOrRoleRequest
	30, // 60: proto.Casbin.GetUsersOrRolesForUsersOrRoles:input_type -> proto.UsersOrRolesRequest
	29, // 61: proto.Casbin.GetUsersOrRolesInUserOrRole:input_type -> proto.UserOrRoleRequest
	30, // 62: proto.Casbin.GetUsersOrRolesInUsersOrRoles:input_type -> proto.UsersOrRolesRequest
	31, // 63: proto.Casbin.GetUsersOrRolesForUserOrRoleWithPattern:input_type -> proto.UserOrRoleWithPatternRequest
	31, // 64: proto.Casbin.GetUsersOrRolesInUserOrRoleWithPattern:input_type -> proto.UserOrRoleWithPatternRequest
	15, // 65: proto.Casbin.AddObjectForObject:input_type -> proto.GroupPolicyRequest
	16, // 66: proto.Casbin.AddObjectsForObjects:input_type -> proto.GroupPoliciesRequest
	15, // 67: proto.Casbin.RemoveObjectForObject:input_type -> proto.GroupPolicyRequest
	16, // 68: proto.Casbin.RemoveObjectsForObjects:input_type -> proto.GroupPoliciesRequest
	33, // 69: proto.Casbin.GetObjectsForObject:input_type -> proto.ObjectRequest
	34, // 70: proto.Casbin.GetObjectsForObjects:input_type -> proto.ObjectsRequest
	33, // 71: proto.Casbin.GetObjectsInObject:input_type -> proto.ObjectRequest
	34, // 72: proto.Casbin.GetObjectsInObjects:input_type -> proto.ObjectsRequest
	35, // 73: proto.Casbin.GetObjectsForObjectWithPattern:input_type -> proto.ObjectWithPatternRequest
	35, // 74: proto.Casbin.GetObjectsInObjectWithPattern:input_type -> proto.ObjectWithPatternRequest
	13, // 75: proto.Casbin.AddRolePermissionUnit:input_type -> proto.RolePermissionUnitRequest
	29, // 76: proto.Casbin.RemoveRolePermissionUnit:input_type -> proto.UserOrRoleRequest
	30, // 77: proto.Casbin.RemoveRolePermissionUnits:input_type -> proto.UsersOrRolesRequest
	22, // 78: proto.Casbin.IsMaster:input_type -> proto.EmptyRequest
	22, // 79: proto.Casbin.SavePolicy:input_type -> proto.EmptyRequest
	22, // 80: proto.Casbin.RemoveDomainPolicies:input_type -> proto.EmptyRequest
	45, // 81: proto.Casbin.AddDomainConfig:input_type -> proto.DomainConfigRequest
	22, // 82: proto.Casbin.GetDomainConfig:input_type -> proto.EmptyRequest
	22, // 83: proto.Casbin.RemoveDomainConfig:input_type -> proto.EmptyRequest
	49, // 84: proto.Casbin.AddTokenAccessForDomain:input_type -> proto.TokenAccessRequest
	22, // 85: proto.Casbin.GetTokenAccessList:input_type -> proto.EmptyRequest
	49, // 86: proto.Casbin.RemoveTokenAccessForDomain:input_type -> proto.TokenAccessRequest
	5,  // 87: proto.Casbin.AddPermissionUnit:output_type -> proto.PermissionUnitReply
	6,  // 88: proto.Casbin.AddPermissionUnits:output_type -> proto.PermissionUnitsReply
	5,  // 89: proto.Casbin.RemovePermissionUnit:output_type -> proto.PermissionUnitReply
	6,  // 90: proto.Casbin.RemovePermissionUnits:output_type -> proto.PermissionUnitsReply
	26, // 91: proto.Casbin.AddPermissionUnitV2:output_type -> proto.IntReply
	26, // 92: proto.Casbin.AddPermissionUnitsV2:output_type -> proto.IntReply
	26, // 93: proto.Casbin.RemovePermissionUnitV2:output_type -> proto.IntReply
	26, // 94: proto.Casbin.RemovePermissionUnitsV2:output_type -> proto.IntReply
	23, // 95: proto.Casbin.RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole:output_type -> proto.EmptyReply
	23, // 96: proto.Casbin.RemovePermissionUnitsV2AndGroupPoliciesForObject:output_type -> proto.EmptyReply
	11, // 97: proto.Casbin.GetPermissionInfoForUserOrRole:output_type -> proto.PermissionInfoReply
	11, // 98: proto.Casbin.GetPermissionInfoForObject:output_type -> proto.PermissionInfoReply
	11, // 99: proto.Casbin.GetPermissionInfoForUserOrRoleAndObject:output_type -> proto.PermissionInfoReply
	11, // 100: proto.Casbin.ReplacePermissionInfoForUserOrRole:output_type -> proto.PermissionInfoReply
	27, // 101: proto.Casbin.GetObjectsForUserWithPermission:output_type -> proto.ArrayReply
	27, // 102: proto.Casbin.GetObjectsForUserWithPermissionsEx:output_type -> proto.ArrayReply
	39, // 103: proto.Casbin.GetObjectTreesForUserWithPermissions:output_type -> proto.GroupPoliciesReply
	27, // 104: proto.Casbin.GetPermissionsForUserWithObject:output_type -> proto.ArrayReply
	43, // 105: proto.Casbin.GetPermissionsForUserWithObjectsEx:output_type -> proto.PermissionsWithObjectListReply
	27, // 106: proto.Casbin.GetUsersOrRolesForObjectWithPermission:output_type -> proto.ArrayReply
	24, // 107: proto.Casbin.CheckPermission:output_type -> proto.BoolReply
	25, // 108: proto.Casbin.BatchCheckPermission:output_type -> proto.BoolArrayReply
	27, // 109: proto.Casbin.GetObjectsForUserWithRoleCls:output_type -> proto.ArrayReply
	27, // 110: proto.Casbin.GetRolesForUserWithObject:output_type -> proto.ArrayReply
	27, // 111: proto.Casbin.GetUsersOrRolesForObjectWithRoleCls:output_type -> proto.ArrayReply
	24, // 112: proto.Casbin.CheckRole:output_type -> proto.BoolReply
	24, // 113: proto.Casbin.AddUserOrRoleForUserOrRole:output_type -> proto.BoolReply
	24, // 114: proto.Casbin.AddUsersOrRolesForUsersOrRoles:output_type -> proto.BoolReply
	24, // 115: proto.Casbin.RemoveUserOrRoleForUserOrRole:output_type -> proto.BoolReply
	24, // 116: proto.Casbin.RemoveUsersOrRolesForUsersOrRoles:output_type -> proto.BoolReply
	39, // 117: proto.Casbin.GetUsersOrRolesForUserOrRole:output_type -> proto.GroupPoliciesReply
	41, // 118: proto.Casbin.GetUsersOrRolesForUsersOrRoles:output_type -> proto.GroupPoliciesWithRootListReply
	39, // 119: proto.Casbin.GetUsersOrRolesInUserOrRole:output_type -> proto.GroupPoliciesReply
	41, // 120: proto.Casbin.GetUsersOrRolesInUsersOrRoles:output_type -> proto.GroupPoliciesWithRootListReply
	39, // 121: proto.Casbin.GetUsersOrRolesForUserOrRoleWithPattern:output_type -> proto.GroupPoliciesReply
	39, // 122: proto.Casbin.GetUsersOrRolesInUserOrRoleWithPattern:output_type -> proto.GroupPoliciesReply
	24, // 123: proto.Casbin.AddObjectForObject:output_type -> proto.BoolReply
	24, // 124: proto.Casbin.AddObjectsForObjects:output_type -> proto.BoolReply
	24, // 125: proto.Casbin.RemoveObjectForObject:output_type -> proto.BoolReply
	24, // 126: proto.Casbin.RemoveObjectsForObjects:output_type -> proto.BoolReply
	39, // 127: proto.Casbin.GetObjectsForObject:output_type -> proto.GroupPoliciesReply
	41, // 128: proto.Casbin.GetObjectsForObjects:output_type -> proto.GroupPoliciesWithRootListReply
	39, // 129: proto.Casbin.GetObjectsInObject:output_type -> proto.GroupPoliciesReply
	41, // 130: proto.Casbin.GetObjectsInObjects:output_type -> proto.GroupPoliciesWithRootListReply
	39, // 131: proto.Casbin.GetObjectsForObjectWithPattern:output_type -> proto.GroupPoliciesReply
	39, // 132: proto.Casbin.GetObjectsInObjectWithPattern:output_type -> proto.GroupPoliciesReply
	14, // 133: proto.Casbin.AddRolePermissionUnit:output_type -> proto.RolePermissionUnitReply
	24, // 134: proto.Casbin.RemoveRolePermissionUnit:output_type -> proto.BoolReply
	24, // 135: proto.Casbin.RemoveRolePermissionUnits:output_type -> proto.BoolReply
	24, // 136: proto.Casbin.IsMaster:output_type -> proto.BoolReply
	24, // 137: proto.Casbin.SavePolicy:output_type -> proto.BoolReply
	24, // 138: proto.Casbin.RemoveDomainPolicies:output_type -> proto.BoolReply
	24, // 139: proto.Casbin.AddDomainConfig:output_type -> proto.BoolReply
	46, // 140: proto.Casbin.GetDomainConfig:output_type -> proto.DomainConfigReply
	24, // 141: proto.Casbin.RemoveDomainConfig:output_type -> proto.BoolReply
	24, // 142: proto.Casbin.AddTokenAccessForDomain:output_type -> proto.BoolReply
	48, // 143: proto.Casbin.GetTokenAccessList:output_type -> proto.TokenAccessListReply
	24, // 144: proto.Casbin.RemoveTokenAccessForDomain:output_type -> proto.BoolReply
	87, // [87:145] is the sub-list for method output_type
	29, // [29:87] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_proto_casbin_proto_init() }
func file_proto_casbin_proto_init() {
	if File_proto_casbin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_casbin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmGroupPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionUnitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionUnitsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionUnitV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionUnitV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionUnitsV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolePermissionUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolePermissionUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolePermissionUnitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPermissionObjectPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAclSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclSearchExRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclSearchForObjectTreesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolArrayReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersOrRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrRoleWithPatternRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrRoleWithFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectWithPatternRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectWithFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrRoleAndObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplacePermissionInfoForUserOrRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupPoliciesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupPoliciesWithRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupPoliciesWithRootListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsWithObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsWithObjectListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAccessListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainConfig_PermissionsOfObjectCls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_casbin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainConfig_PermissionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_casbin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_casbin_proto_goTypes,
		DependencyIndexes: file_proto_casbin_proto_depIdxs,
		MessageInfos:      file_proto_casbin_proto_msgTypes,
	}.Build()
	File_proto_casbin_proto = out.File
	file_proto_casbin_proto_rawDesc = nil
	file_proto_casbin_proto_goTypes = nil
	file_proto_casbin_proto_depIdxs = nil
}
