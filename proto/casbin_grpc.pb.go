// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/casbin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Casbin_AddPermissionUnit_FullMethodName                                    = "/proto.Casbin/AddPermissionUnit"
	Casbin_AddPermissionUnits_FullMethodName                                   = "/proto.Casbin/AddPermissionUnits"
	Casbin_RemovePermissionUnit_FullMethodName                                 = "/proto.Casbin/RemovePermissionUnit"
	Casbin_RemovePermissionUnits_FullMethodName                                = "/proto.Casbin/RemovePermissionUnits"
	Casbin_AddPermissionUnitV2_FullMethodName                                  = "/proto.Casbin/AddPermissionUnitV2"
	Casbin_AddPermissionUnitsV2_FullMethodName                                 = "/proto.Casbin/AddPermissionUnitsV2"
	Casbin_RemovePermissionUnitV2_FullMethodName                               = "/proto.Casbin/RemovePermissionUnitV2"
	Casbin_RemovePermissionUnitsV2_FullMethodName                              = "/proto.Casbin/RemovePermissionUnitsV2"
	Casbin_RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole_FullMethodName = "/proto.Casbin/RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole"
	Casbin_RemovePermissionUnitsV2AndGroupPoliciesForObject_FullMethodName     = "/proto.Casbin/RemovePermissionUnitsV2AndGroupPoliciesForObject"
	Casbin_GetPermissionInfoForUserOrRole_FullMethodName                       = "/proto.Casbin/GetPermissionInfoForUserOrRole"
	Casbin_GetPermissionInfoForObject_FullMethodName                           = "/proto.Casbin/GetPermissionInfoForObject"
	Casbin_GetPermissionInfoForUserOrRoleAndObject_FullMethodName              = "/proto.Casbin/GetPermissionInfoForUserOrRoleAndObject"
	Casbin_ReplacePermissionInfoForUserOrRole_FullMethodName                   = "/proto.Casbin/ReplacePermissionInfoForUserOrRole"
	Casbin_GetObjectsForUserWithPermission_FullMethodName                      = "/proto.Casbin/GetObjectsForUserWithPermission"
	Casbin_GetObjectsForUserWithPermissionsEx_FullMethodName                   = "/proto.Casbin/GetObjectsForUserWithPermissionsEx"
	Casbin_GetObjectTreesForUserWithPermissions_FullMethodName                 = "/proto.Casbin/GetObjectTreesForUserWithPermissions"
	Casbin_GetPermissionsForUserWithObject_FullMethodName                      = "/proto.Casbin/GetPermissionsForUserWithObject"
	Casbin_GetPermissionsForUserWithObjectsEx_FullMethodName                   = "/proto.Casbin/GetPermissionsForUserWithObjectsEx"
	Casbin_GetUsersOrRolesForObjectWithPermission_FullMethodName               = "/proto.Casbin/GetUsersOrRolesForObjectWithPermission"
	Casbin_CheckPermission_FullMethodName                                      = "/proto.Casbin/CheckPermission"
	Casbin_BatchCheckPermission_FullMethodName                                 = "/proto.Casbin/BatchCheckPermission"
	Casbin_GetObjectsForUserWithRoleCls_FullMethodName                         = "/proto.Casbin/GetObjectsForUserWithRoleCls"
	Casbin_GetRolesForUserWithObject_FullMethodName                            = "/proto.Casbin/GetRolesForUserWithObject"
	Casbin_GetUsersOrRolesForObjectWithRoleCls_FullMethodName                  = "/proto.Casbin/GetUsersOrRolesForObjectWithRoleCls"
	Casbin_CheckRole_FullMethodName                                            = "/proto.Casbin/CheckRole"
	Casbin_AddUserOrRoleForUserOrRole_FullMethodName                           = "/proto.Casbin/AddUserOrRoleForUserOrRole"
	Casbin_AddUsersOrRolesForUsersOrRoles_FullMethodName                       = "/proto.Casbin/AddUsersOrRolesForUsersOrRoles"
	Casbin_RemoveUserOrRoleForUserOrRole_FullMethodName                        = "/proto.Casbin/RemoveUserOrRoleForUserOrRole"
	Casbin_RemoveUsersOrRolesForUsersOrRoles_FullMethodName                    = "/proto.Casbin/RemoveUsersOrRolesForUsersOrRoles"
	Casbin_GetUsersOrRolesForUserOrRole_FullMethodName                         = "/proto.Casbin/GetUsersOrRolesForUserOrRole"
	Casbin_GetUsersOrRolesForUsersOrRoles_FullMethodName                       = "/proto.Casbin/GetUsersOrRolesForUsersOrRoles"
	Casbin_GetUsersOrRolesInUserOrRole_FullMethodName                          = "/proto.Casbin/GetUsersOrRolesInUserOrRole"
	Casbin_GetUsersOrRolesInUsersOrRoles_FullMethodName                        = "/proto.Casbin/GetUsersOrRolesInUsersOrRoles"
	Casbin_GetUsersOrRolesForUserOrRoleWithPattern_FullMethodName              = "/proto.Casbin/GetUsersOrRolesForUserOrRoleWithPattern"
	Casbin_GetUsersOrRolesInUserOrRoleWithPattern_FullMethodName               = "/proto.Casbin/GetUsersOrRolesInUserOrRoleWithPattern"
	Casbin_AddObjectForObject_FullMethodName                                   = "/proto.Casbin/AddObjectForObject"
	Casbin_AddObjectsForObjects_FullMethodName                                 = "/proto.Casbin/AddObjectsForObjects"
	Casbin_RemoveObjectForObject_FullMethodName                                = "/proto.Casbin/RemoveObjectForObject"
	Casbin_RemoveObjectsForObjects_FullMethodName                              = "/proto.Casbin/RemoveObjectsForObjects"
	Casbin_GetObjectsForObject_FullMethodName                                  = "/proto.Casbin/GetObjectsForObject"
	Casbin_GetObjectsForObjects_FullMethodName                                 = "/proto.Casbin/GetObjectsForObjects"
	Casbin_GetObjectsInObject_FullMethodName                                   = "/proto.Casbin/GetObjectsInObject"
	Casbin_GetObjectsInObjects_FullMethodName                                  = "/proto.Casbin/GetObjectsInObjects"
	Casbin_GetObjectsForObjectWithPattern_FullMethodName                       = "/proto.Casbin/GetObjectsForObjectWithPattern"
	Casbin_GetObjectsInObjectWithPattern_FullMethodName                        = "/proto.Casbin/GetObjectsInObjectWithPattern"
	Casbin_AddRolePermissionUnit_FullMethodName                                = "/proto.Casbin/AddRolePermissionUnit"
	Casbin_RemoveRolePermissionUnit_FullMethodName                             = "/proto.Casbin/RemoveRolePermissionUnit"
	Casbin_RemoveRolePermissionUnits_FullMethodName                            = "/proto.Casbin/RemoveRolePermissionUnits"
	Casbin_IsMaster_FullMethodName                                             = "/proto.Casbin/IsMaster"
	Casbin_SavePolicy_FullMethodName                                           = "/proto.Casbin/SavePolicy"
	Casbin_RemoveDomainPolicies_FullMethodName                                 = "/proto.Casbin/RemoveDomainPolicies"
	Casbin_AddDomainConfig_FullMethodName                                      = "/proto.Casbin/AddDomainConfig"
	Casbin_GetDomainConfig_FullMethodName                                      = "/proto.Casbin/GetDomainConfig"
	Casbin_RemoveDomainConfig_FullMethodName                                   = "/proto.Casbin/RemoveDomainConfig"
	Casbin_AddTokenAccessForDomain_FullMethodName                              = "/proto.Casbin/AddTokenAccessForDomain"
	Casbin_GetTokenAccessList_FullMethodName                                   = "/proto.Casbin/GetTokenAccessList"
	Casbin_RemoveTokenAccessForDomain_FullMethodName                           = "/proto.Casbin/RemoveTokenAccessForDomain"
)

// CasbinClient is the client API for Casbin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CasbinClient interface {
	// *
	// @description 此接口已废弃，建议使用AddPermissionUnitV2
	AddPermissionUnit(ctx context.Context, in *PermissionUnitRequest, opts ...grpc.CallOption) (*PermissionUnitReply, error)
	AddPermissionUnits(ctx context.Context, in *PermissionUnitsRequest, opts ...grpc.CallOption) (*PermissionUnitsReply, error)
	// *
	// @description 此接口已废弃，建议使用RemovePermissionUnitV2
	RemovePermissionUnit(ctx context.Context, in *PermissionUnitRequest, opts ...grpc.CallOption) (*PermissionUnitReply, error)
	RemovePermissionUnits(ctx context.Context, in *PermissionUnitsRequest, opts ...grpc.CallOption) (*PermissionUnitsReply, error)
	// *
	// @description 在指定的域下添加一个或多个权限单元V2，一个权限单元V2包含一个用户，一个角色类型，若干权限，一个资源
	// @params permissionUnitsV2，权限单元V2，一个权限单元V2包含一个用户，一个角色类型，若干权限，含义为一个用户因为某个角色类型对某个资源拥有某些权限
	// @params checkExistFlag，当设定为True时，添加过程中将检查该用户是否已经拥有相应的角色，如果存在则不会重复添加，当设定为False时，添加过程中将不会检查该用户是否已经拥有相应的角色，通常用于批量添加
	// @return 返回实际添加的权限单元数量
	// @addition 同时添加多个权限单元时，建议通过批量接口进行添加，以提高效率
	AddPermissionUnitV2(ctx context.Context, in *PermissionUnitV2Request, opts ...grpc.CallOption) (*IntReply, error)
	AddPermissionUnitsV2(ctx context.Context, in *PermissionUnitsV2Request, opts ...grpc.CallOption) (*IntReply, error)
	// *
	// @description 在指定的域下删除一个或多个权限单元V2，一个权限单元V2包含一个用户，一个角色类型，若干权限，一个资源
	// @params permissionUnitsV2，权限单元V2，一个权限单元V2包含一个用户，一个角色类型，若干权限，一个资源
	// @return 返回实际删除的权限单元数量
	// @addition 同时删除多个权限单元时，建议通过批量接口进行删除，以提高效率
	RemovePermissionUnitV2(ctx context.Context, in *PermissionUnitV2Request, opts ...grpc.CallOption) (*IntReply, error)
	RemovePermissionUnitsV2(ctx context.Context, in *PermissionUnitsV2Request, opts ...grpc.CallOption) (*IntReply, error)
	// *
	// @description 删除一个用户/角色实例直接相关所有相关的权限规则
	// @params userOrRole，用户或角色
	RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole(ctx context.Context, in *UserOrRoleRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// *
	// @description 删除一个资源直接相关所有相关的权限规则，通常用于删除资源时使用
	// @params object，资源
	RemovePermissionUnitsV2AndGroupPoliciesForObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// *
	// @description 在指定的域下，获取某个用户或某个角色拥有的所有权限信息
	// @param userOrRole 用户或角色
	// @param searchChildObjectsFlag 是否搜索子资源
	// @param maxSearchChildObjectsLevel 最大搜索子资源的层数
	// @return 返回权限信息，包含p规则（角色实例对资源的权限），用户组规则（用户、用户组和角色实例的继承关系）和资源组规则（资源、资源组的继承关系）
	GetPermissionInfoForUserOrRole(ctx context.Context, in *UserOrRoleWithFlagRequest, opts ...grpc.CallOption) (*PermissionInfoReply, error)
	// *
	// @description 在指定的域下，获取某个资源拥有的所有权限信息
	// @param object 资源
	// @param searchChildUsersOrRolesFlag 是否搜索子用户或角色
	// @param maxSearchChildUsersOrRolesLevel 最大搜索子用户或角色的层数
	// @return 返回权限信息，包含p规则（角色实例对资源的权限），用户组规则（用户、用户组和角色实例的继承关系）和资源组规则（资源、资源组的继承关系）
	GetPermissionInfoForObject(ctx context.Context, in *ObjectWithFlagRequest, opts ...grpc.CallOption) (*PermissionInfoReply, error)
	// *
	// @description 在指定的域下，获取某个用户和某个资源拥有的所有权限信息
	// @param userOrRole 用户或角色
	// @param object 资源
	// @return 返回权限信息，包含p规则（角色实例对资源的权限），用户组规则（用户、用户组和角色实例的继承关系）和资源组规则（资源、资源组的继承关系）
	// @addition 此接口仅返回同时与指定用户和指定资源相关的权限信息
	GetPermissionInfoForUserOrRoleAndObject(ctx context.Context, in *UserOrRoleAndObjectRequest, opts ...grpc.CallOption) (*PermissionInfoReply, error)
	// *
	// @description 在指定的域下，将一个用户或角色实例的权限复制到另一个用户或角色实例
	// @param oldUserOrRole 被复制的用户或角色
	// @param newUserOrRole 复制到的用户或角色
	// @return oldUserOrRole拥有的所有权限信息，不含物体组信息
	// @addition 系统将使用浅复制，不创建新的角色实例，而是直接将权限规则进行替换
	// @addition 调用时，输入的oldUserOrRole必须在用户树上为叶子节点，尝试替换非叶子节点将直接报错
	ReplacePermissionInfoForUserOrRole(ctx context.Context, in *ReplacePermissionInfoForUserOrRoleRequest, opts ...grpc.CallOption) (*PermissionInfoReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 权限 + 资源类型 -> 资源列表
	// @param user 用户或角色
	// @param permission 权限
	// @param objectCls 资源类型，不允许为空
	// @param objectGroup 资源组，限定搜索范围，如果为空，则不限制资源组，否则只会搜索指定资源组的资源
	// @return 返回用户有权限的资源列表
	GetObjectsForUserWithPermission(ctx context.Context, in *AclSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 权限 + 资源类型 -> 资源列表
	// @param user 用户或角色
	// @param permissions 权限列表，允许指定多个权限，只需要用户拥有其中一个权限即认为用户有权限
	// @param objectCls 资源类型，不允许为空
	// @param objectGroup 资源组，限定搜索范围，如果为空，则不限制资源组，否则只会搜索指定资源组的资源
	// @param searchChildObjectsFlag 是否递归搜索子资源
	// @param reverseObjectsFlag 是否反转资源搜索路径，反转后，用户会因为对子资源有权限而被认为对父资源也有权限
	// @return 返回用户有权限的资源列表
	// @addition 此接口是对上一接口的扩展，可以指定多个权限进行类似or的拼接，可以选择是否递归搜索子资源，可以反转资源权限搜索路径
	GetObjectsForUserWithPermissionsEx(ctx context.Context, in *AclSearchExRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 权限 + 根资源（可选） + 搜索方向 + 搜索限制（可选） -> 资源树
	// @param user 用户或角色
	// @param permissions 权限列表，允许指定多个权限，只需要用户拥有其中一个权限即认为用户有权限
	// @param object 根资源，搜索的起点，如果为空，则会搜索用户所有有权限的资源，否则根据搜索方向从根资源开始匹配用户有权限的资源
	// @param reverseObjectsFlag 是否反转资源搜索结果，反转后，用户会因为对子资源有权限而被认为对父资源也有权限
	// @param objectClsPatterns 指定资源类型的列表，如果为空，则不限制资源类型，否则只会搜索指定类型的资源
	// @return 以树结构返回的资源列表
	// @addition 此接口主要用于搜索用户的资源树，将以树的结构返回用户有权限的资源，非常适合需要在前端展示用户有权限的资源树的场景
	GetObjectTreesForUserWithPermissions(ctx context.Context, in *AclSearchForObjectTreesRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 资源 -> 权限列表
	// @param user 用户或角色
	// @param object 资源
	// @return 权限列表
	GetPermissionsForUserWithObject(ctx context.Context, in *AclSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 资源 -> 权限列表
	// @param user 用户或角色
	// @param objects 资源列表
	// @return 针对每一个资源的权限列表
	// @addition 此接口是对上一接口的扩展，可以指定多个资源，返回针对每一个资源的权限列表
	GetPermissionsForUserWithObjectsEx(ctx context.Context, in *AclSearchExRequest, opts ...grpc.CallOption) (*PermissionsWithObjectListReply, error)
	// *
	// @description 类似ACL的接口，权限 + 资源 -> 用户和角色列表
	// @param object 资源列表
	// @param permission 权限
	// @return 拥有权限的用户
	GetUsersOrRolesForObjectWithPermission(ctx context.Context, in *AclSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 权限 + 资源 -> 二元判断
	// @param user 用户或角色
	// @param permission 权限
	// @param object 资源
	// @return 用户是否对指定的资源拥有相应的权限
	CheckPermission(ctx context.Context, in *AclSearchRequest, opts ...grpc.CallOption) (*BoolReply, error)
	BatchCheckPermission(ctx context.Context, in *BatchAclSearchRequest, opts ...grpc.CallOption) (*BoolArrayReply, error)
	// *
	// @description 资源查询的接口，用户 + 角色类型 + 资源类型 -> 资源列表
	// @param user 用户或角色
	// @param roleCls 角色类型
	// @return 用户拥有特定角色类型的资源列表
	GetObjectsForUserWithRoleCls(ctx context.Context, in *RoleSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	// *
	// @description 角色查询的接口，用户 + 资源 -> 角色列表
	// @param user 用户或角色
	// @param object 资源
	// @return 特定资源和用户相关的角色实例列表
	GetRolesForUserWithObject(ctx context.Context, in *RoleSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	// *
	// @description 用户的查询接口，角色类型 + 资源 -> 用户或角色列表
	// @param roleCls 角色类型
	// @param object 资源
	// @return 哪些用户对资源拥有特定的角色
	GetUsersOrRolesForObjectWithRoleCls(ctx context.Context, in *RoleSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error)
	// *
	// @description 二元判断接口，用户 + 角色类型 + 资源 -> 二元判断
	// @param user 用户或角色
	// @param roleCls 角色类型
	// @param object 资源
	// @return 用户是否具有特定的角色
	CheckRole(ctx context.Context, in *RoleSearchRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 在指定的域下添加角色继承关系，或用户继承关系，或用户和角色的绑定关系。
	// @param child，子用户
	// @param parent，父用户，通常是用户组或者角色实例
	// @return 返回是否添加成功
	// @addition 允许多级别嵌套，但是最高不能超过10级
	// @addition 添加过程本身是幂等的，重复添加不会产生多个权限规则
	AddUserOrRoleForUserOrRole(ctx context.Context, in *GroupPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	AddUsersOrRolesForUsersOrRoles(ctx context.Context, in *GroupPoliciesRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 在指定的域下删除角色继承关系，或用户继承关系，或用户和角色的绑定关系。
	// @param child，子用户
	// @param parent，父用户，通常是用户组或者角色实例
	// @return 返回是否删除成功
	// @addition 删除过程本身是幂等的，重复删除不会报错，而是返回false
	RemoveUserOrRoleForUserOrRole(ctx context.Context, in *GroupPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveUsersOrRolesForUsersOrRoles(ctx context.Context, in *GroupPoliciesRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 获取指定的用户或角色的所有父用户和父角色，child->parents
	// @param userOrRole，用户或角色
	// @return 返回从当前用户或角色开始的继承树
	// @addition 会返回所有具有继承了该角色的所有角色和用户，需要自行根据前缀区分
	GetUsersOrRolesForUserOrRole(ctx context.Context, in *UserOrRoleRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error)
	GetUsersOrRolesForUsersOrRoles(ctx context.Context, in *UsersOrRolesRequest, opts ...grpc.CallOption) (*GroupPoliciesWithRootListReply, error)
	// *
	// @description 获取指定的用户或角色的所有子用户和角色, parent->children
	// @param userOrRole，用户或角色
	// @return 返回从当前节点开始的继承树
	// @addition 会返回所有具有继承了该角色的所有角色和用户，需要自行根据前缀区分
	GetUsersOrRolesInUserOrRole(ctx context.Context, in *UserOrRoleRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error)
	GetUsersOrRolesInUsersOrRoles(ctx context.Context, in *UsersOrRolesRequest, opts ...grpc.CallOption) (*GroupPoliciesWithRootListReply, error)
	// *
	// @description 获取指定的用户或角色的所有父用户和父角色，child->parents
	// @param userOrRole，用户或角色
	// @param userOrRoleClsPatterns，匹配规则
	// @return 返回从当前节点开始的继承树
	// @addition 会返回所有具有继承了该角色的所有角色和用户，需要自行根据前缀区分
	// @addition 此接口是对上一接口的扩展，自动按照广度优先进行级联搜索，完成搜索后按照指定的pattern对搜索结果进行过滤，只返回匹配的用户和角色，比如搜索到/u/user_group/1 -> /u/user/1 -> /u/sub_user/1，如果pattern为/u/user_group/ -> /u/user，则只返回/u/user_group/1 -> /u/user/1，需要匹配的路径必须是一个长度大于2的列表
	GetUsersOrRolesForUserOrRoleWithPattern(ctx context.Context, in *UserOrRoleWithPatternRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error)
	// *
	// @description 获取继承了指定的用户或角色的所有用户和角色, parent->children
	// @param userOrRole，用户或角色
	// @param userOrRoleClsPatterns，匹配规则
	// @return 返回从当前节点开始的继承树
	// @addition 会返回所有具有继承了该角色的所有角色和用户，需要自行根据前缀区分
	// @addition 自动按照广度优先进行级联搜索，完成搜索后按照指定的pattern对搜索结果进行过滤，只返回匹配的用户和角色，比如搜索到/u/user_group/1 -> /u/user/1 -> /u/sub_user/1，如果pattern为/u/user_group/ -> /u/user，则只返回/u/user_group/1 -> /u/user/1，需要匹配的路径必须是一个长度大于2的列表
	GetUsersOrRolesInUserOrRoleWithPattern(ctx context.Context, in *UserOrRoleWithPatternRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error)
	// *
	// @description 在指定的域下添加资源继承关系
	// @param child，子物体
	// @parma parent，父物体
	// @return 返回是否添加成功
	// @addition 允许多级别嵌套，但是最高不能超过10级
	// @addition 添加过程本身是幂等的，重复添加不会产生多个权限规则
	AddObjectForObject(ctx context.Context, in *GroupPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	AddObjectsForObjects(ctx context.Context, in *GroupPoliciesRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 在指定的域下删除资源继承关系
	// @param child，子物体
	// @parma parent，父物体
	// @return 返回是否删除成功
	// @addition 允许多级别嵌套，但是最高不能超过10级
	// @addition 添加过程本身是幂等的，重复删除不会报错
	RemoveObjectForObject(ctx context.Context, in *GroupPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveObjectsForObjects(ctx context.Context, in *GroupPoliciesRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 获取指定的物体的所有父物体，child->parents
	// @param object，物体
	// @return 返回从当前物体开始的继承树
	GetObjectsForObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error)
	GetObjectsForObjects(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*GroupPoliciesWithRootListReply, error)
	// *
	// @description 获取指定的物体的所有子物体, parent->children
	// @param object，物体
	// @return 返回从当前物体开始的继承树
	GetObjectsInObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error)
	GetObjectsInObjects(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*GroupPoliciesWithRootListReply, error)
	// *
	// @description 获取指定的物体的所有父物体，child->parents
	// @param object，物体
	// @param objectsPatterns，匹配规则
	// @return 返回从当前节点开始的继承树
	// @addition 自动按照广度优先进行级联搜索，完成搜索后按照指定的pattern对搜索结果进行过滤，只返回匹配的资源，比如搜索到/o/ci/idc/1 -> /o/ci/server_room/1 -> /o/ci/server/1，如果pattern为/o/ci/idc/ -> /o/ci/server_room/，则只返回/o/ci/idc/1 -> /o/ci/server_room/1，需要匹配的路径必须是一个长度大于2的列表
	GetObjectsForObjectWithPattern(ctx context.Context, in *ObjectWithPatternRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error)
	// *
	// @description 获取指定的物体的所有子物体, parent->children
	// @param object，物体
	// @param objectsPatterns，匹配规则
	// @return 返回从当前节点开始的继承树
	// @addition 自动按照广度优先进行级联搜索，完成搜索后按照指定的pattern对搜索结果进行过滤，只返回匹配的资源，比如搜索到/o/ci/idc/1 -> /o/ci/server_room/1 -> /o/ci/server/1，如果pattern为/o/ci/idc/ -> /o/ci/server_room/，则只返回/o/ci/idc/1 -> /o/ci/server_room/1，需要匹配的路径必须是一个长度大于2的列表
	GetObjectsInObjectWithPattern(ctx context.Context, in *ObjectWithPatternRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error)
	// *
	// @description 在指定的域下添加一个“角色权限单元”，预先绑定某些物体
	// @param rolePermissionUnit.role，角色实例
	// @param rolePermissionUnit.roleCls，角色类型，与角色实例只需要指定一个，当角色实例为空时，则会通过角色类型构造角色实例
	// @param rolePermissionUnit.permissionsWithObject，角色对哪些物体拥有什么权限
	// @param replace，为True时，向同一个角色重复添加规则将删除原有的规则，否则只新增规则
	// @return 返回权限有新增的角色
	// @addition 完成预制角色添加后，可以使用AddUserOrRoleForUserOrRole将角色实例绑定至用户
	AddRolePermissionUnit(ctx context.Context, in *RolePermissionUnitRequest, opts ...grpc.CallOption) (*RolePermissionUnitReply, error)
	// *
	// @description 在指定的域下删除“角色权限单元”
	// @param userOrRole，角色实例
	// @return 返回是否删除成功
	// @addition 删除过程中不校验角色是否存在，删除一个不存在的角色权限单元并不会导致报错
	RemoveRolePermissionUnit(ctx context.Context, in *UserOrRoleRequest, opts ...grpc.CallOption) (*BoolReply, error)
	RemoveRolePermissionUnits(ctx context.Context, in *UsersOrRolesRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 检查当前的enforcer是否为master
	IsMaster(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 向Redis强制同步保存一次策略
	SavePolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 删除指定domain的策略
	RemoveDomainPolicies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 给指定域添加配置
	AddDomainConfig(ctx context.Context, in *DomainConfigRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 获取指定域的配置
	GetDomainConfig(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DomainConfigReply, error)
	// *
	// @description 删除指定域的配置
	RemoveDomainConfig(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 给token添加指定域的权限
	AddTokenAccessForDomain(ctx context.Context, in *TokenAccessRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// *
	// @description 获取全部token的权限列表
	GetTokenAccessList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TokenAccessListReply, error)
	// *
	// @description 删除token对指定域的权限
	RemoveTokenAccessForDomain(ctx context.Context, in *TokenAccessRequest, opts ...grpc.CallOption) (*BoolReply, error)
}

type casbinClient struct {
	cc grpc.ClientConnInterface
}

func NewCasbinClient(cc grpc.ClientConnInterface) CasbinClient {
	return &casbinClient{cc}
}

func (c *casbinClient) AddPermissionUnit(ctx context.Context, in *PermissionUnitRequest, opts ...grpc.CallOption) (*PermissionUnitReply, error) {
	out := new(PermissionUnitReply)
	err := c.cc.Invoke(ctx, Casbin_AddPermissionUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddPermissionUnits(ctx context.Context, in *PermissionUnitsRequest, opts ...grpc.CallOption) (*PermissionUnitsReply, error) {
	out := new(PermissionUnitsReply)
	err := c.cc.Invoke(ctx, Casbin_AddPermissionUnits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemovePermissionUnit(ctx context.Context, in *PermissionUnitRequest, opts ...grpc.CallOption) (*PermissionUnitReply, error) {
	out := new(PermissionUnitReply)
	err := c.cc.Invoke(ctx, Casbin_RemovePermissionUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemovePermissionUnits(ctx context.Context, in *PermissionUnitsRequest, opts ...grpc.CallOption) (*PermissionUnitsReply, error) {
	out := new(PermissionUnitsReply)
	err := c.cc.Invoke(ctx, Casbin_RemovePermissionUnits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddPermissionUnitV2(ctx context.Context, in *PermissionUnitV2Request, opts ...grpc.CallOption) (*IntReply, error) {
	out := new(IntReply)
	err := c.cc.Invoke(ctx, Casbin_AddPermissionUnitV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddPermissionUnitsV2(ctx context.Context, in *PermissionUnitsV2Request, opts ...grpc.CallOption) (*IntReply, error) {
	out := new(IntReply)
	err := c.cc.Invoke(ctx, Casbin_AddPermissionUnitsV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemovePermissionUnitV2(ctx context.Context, in *PermissionUnitV2Request, opts ...grpc.CallOption) (*IntReply, error) {
	out := new(IntReply)
	err := c.cc.Invoke(ctx, Casbin_RemovePermissionUnitV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemovePermissionUnitsV2(ctx context.Context, in *PermissionUnitsV2Request, opts ...grpc.CallOption) (*IntReply, error) {
	out := new(IntReply)
	err := c.cc.Invoke(ctx, Casbin_RemovePermissionUnitsV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole(ctx context.Context, in *UserOrRoleRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, Casbin_RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemovePermissionUnitsV2AndGroupPoliciesForObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, Casbin_RemovePermissionUnitsV2AndGroupPoliciesForObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetPermissionInfoForUserOrRole(ctx context.Context, in *UserOrRoleWithFlagRequest, opts ...grpc.CallOption) (*PermissionInfoReply, error) {
	out := new(PermissionInfoReply)
	err := c.cc.Invoke(ctx, Casbin_GetPermissionInfoForUserOrRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetPermissionInfoForObject(ctx context.Context, in *ObjectWithFlagRequest, opts ...grpc.CallOption) (*PermissionInfoReply, error) {
	out := new(PermissionInfoReply)
	err := c.cc.Invoke(ctx, Casbin_GetPermissionInfoForObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetPermissionInfoForUserOrRoleAndObject(ctx context.Context, in *UserOrRoleAndObjectRequest, opts ...grpc.CallOption) (*PermissionInfoReply, error) {
	out := new(PermissionInfoReply)
	err := c.cc.Invoke(ctx, Casbin_GetPermissionInfoForUserOrRoleAndObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) ReplacePermissionInfoForUserOrRole(ctx context.Context, in *ReplacePermissionInfoForUserOrRoleRequest, opts ...grpc.CallOption) (*PermissionInfoReply, error) {
	out := new(PermissionInfoReply)
	err := c.cc.Invoke(ctx, Casbin_ReplacePermissionInfoForUserOrRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetObjectsForUserWithPermission(ctx context.Context, in *AclSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetObjectsForUserWithPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetObjectsForUserWithPermissionsEx(ctx context.Context, in *AclSearchExRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetObjectsForUserWithPermissionsEx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetObjectTreesForUserWithPermissions(ctx context.Context, in *AclSearchForObjectTreesRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error) {
	out := new(GroupPoliciesReply)
	err := c.cc.Invoke(ctx, Casbin_GetObjectTreesForUserWithPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetPermissionsForUserWithObject(ctx context.Context, in *AclSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetPermissionsForUserWithObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetPermissionsForUserWithObjectsEx(ctx context.Context, in *AclSearchExRequest, opts ...grpc.CallOption) (*PermissionsWithObjectListReply, error) {
	out := new(PermissionsWithObjectListReply)
	err := c.cc.Invoke(ctx, Casbin_GetPermissionsForUserWithObjectsEx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetUsersOrRolesForObjectWithPermission(ctx context.Context, in *AclSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetUsersOrRolesForObjectWithPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) CheckPermission(ctx context.Context, in *AclSearchRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_CheckPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) BatchCheckPermission(ctx context.Context, in *BatchAclSearchRequest, opts ...grpc.CallOption) (*BoolArrayReply, error) {
	out := new(BoolArrayReply)
	err := c.cc.Invoke(ctx, Casbin_BatchCheckPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetObjectsForUserWithRoleCls(ctx context.Context, in *RoleSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetObjectsForUserWithRoleCls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetRolesForUserWithObject(ctx context.Context, in *RoleSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetRolesForUserWithObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetUsersOrRolesForObjectWithRoleCls(ctx context.Context, in *RoleSearchRequest, opts ...grpc.CallOption) (*ArrayReply, error) {
	out := new(ArrayReply)
	err := c.cc.Invoke(ctx, Casbin_GetUsersOrRolesForObjectWithRoleCls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) CheckRole(ctx context.Context, in *RoleSearchRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_CheckRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddUserOrRoleForUserOrRole(ctx context.Context, in *GroupPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_AddUserOrRoleForUserOrRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddUsersOrRolesForUsersOrRoles(ctx context.Context, in *GroupPoliciesRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_AddUsersOrRolesForUsersOrRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveUserOrRoleForUserOrRole(ctx context.Context, in *GroupPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveUserOrRoleForUserOrRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveUsersOrRolesForUsersOrRoles(ctx context.Context, in *GroupPoliciesRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveUsersOrRolesForUsersOrRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetUsersOrRolesForUserOrRole(ctx context.Context, in *UserOrRoleRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error) {
	out := new(GroupPoliciesReply)
	err := c.cc.Invoke(ctx, Casbin_GetUsersOrRolesForUserOrRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetUsersOrRolesForUsersOrRoles(ctx context.Context, in *UsersOrRolesRequest, opts ...grpc.CallOption) (*GroupPoliciesWithRootListReply, error) {
	out := new(GroupPoliciesWithRootListReply)
	err := c.cc.Invoke(ctx, Casbin_GetUsersOrRolesForUsersOrRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetUsersOrRolesInUserOrRole(ctx context.Context, in *UserOrRoleRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error) {
	out := new(GroupPoliciesReply)
	err := c.cc.Invoke(ctx, Casbin_GetUsersOrRolesInUserOrRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetUsersOrRolesInUsersOrRoles(ctx context.Context, in *UsersOrRolesRequest, opts ...grpc.CallOption) (*GroupPoliciesWithRootListReply, error) {
	out := new(GroupPoliciesWithRootListReply)
	err := c.cc.Invoke(ctx, Casbin_GetUsersOrRolesInUsersOrRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetUsersOrRolesForUserOrRoleWithPattern(ctx context.Context, in *UserOrRoleWithPatternRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error) {
	out := new(GroupPoliciesReply)
	err := c.cc.Invoke(ctx, Casbin_GetUsersOrRolesForUserOrRoleWithPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetUsersOrRolesInUserOrRoleWithPattern(ctx context.Context, in *UserOrRoleWithPatternRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error) {
	out := new(GroupPoliciesReply)
	err := c.cc.Invoke(ctx, Casbin_GetUsersOrRolesInUserOrRoleWithPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddObjectForObject(ctx context.Context, in *GroupPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_AddObjectForObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddObjectsForObjects(ctx context.Context, in *GroupPoliciesRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_AddObjectsForObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveObjectForObject(ctx context.Context, in *GroupPolicyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveObjectForObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveObjectsForObjects(ctx context.Context, in *GroupPoliciesRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveObjectsForObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetObjectsForObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error) {
	out := new(GroupPoliciesReply)
	err := c.cc.Invoke(ctx, Casbin_GetObjectsForObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetObjectsForObjects(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*GroupPoliciesWithRootListReply, error) {
	out := new(GroupPoliciesWithRootListReply)
	err := c.cc.Invoke(ctx, Casbin_GetObjectsForObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetObjectsInObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error) {
	out := new(GroupPoliciesReply)
	err := c.cc.Invoke(ctx, Casbin_GetObjectsInObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetObjectsInObjects(ctx context.Context, in *ObjectsRequest, opts ...grpc.CallOption) (*GroupPoliciesWithRootListReply, error) {
	out := new(GroupPoliciesWithRootListReply)
	err := c.cc.Invoke(ctx, Casbin_GetObjectsInObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetObjectsForObjectWithPattern(ctx context.Context, in *ObjectWithPatternRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error) {
	out := new(GroupPoliciesReply)
	err := c.cc.Invoke(ctx, Casbin_GetObjectsForObjectWithPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetObjectsInObjectWithPattern(ctx context.Context, in *ObjectWithPatternRequest, opts ...grpc.CallOption) (*GroupPoliciesReply, error) {
	out := new(GroupPoliciesReply)
	err := c.cc.Invoke(ctx, Casbin_GetObjectsInObjectWithPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddRolePermissionUnit(ctx context.Context, in *RolePermissionUnitRequest, opts ...grpc.CallOption) (*RolePermissionUnitReply, error) {
	out := new(RolePermissionUnitReply)
	err := c.cc.Invoke(ctx, Casbin_AddRolePermissionUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveRolePermissionUnit(ctx context.Context, in *UserOrRoleRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveRolePermissionUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveRolePermissionUnits(ctx context.Context, in *UsersOrRolesRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveRolePermissionUnits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) IsMaster(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_IsMaster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) SavePolicy(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_SavePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveDomainPolicies(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveDomainPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddDomainConfig(ctx context.Context, in *DomainConfigRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_AddDomainConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetDomainConfig(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DomainConfigReply, error) {
	out := new(DomainConfigReply)
	err := c.cc.Invoke(ctx, Casbin_GetDomainConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveDomainConfig(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveDomainConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) AddTokenAccessForDomain(ctx context.Context, in *TokenAccessRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_AddTokenAccessForDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) GetTokenAccessList(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TokenAccessListReply, error) {
	out := new(TokenAccessListReply)
	err := c.cc.Invoke(ctx, Casbin_GetTokenAccessList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinClient) RemoveTokenAccessForDomain(ctx context.Context, in *TokenAccessRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Casbin_RemoveTokenAccessForDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasbinServer is the server API for Casbin service.
// All implementations should embed UnimplementedCasbinServer
// for forward compatibility
type CasbinServer interface {
	// *
	// @description 此接口已废弃，建议使用AddPermissionUnitV2
	AddPermissionUnit(context.Context, *PermissionUnitRequest) (*PermissionUnitReply, error)
	AddPermissionUnits(context.Context, *PermissionUnitsRequest) (*PermissionUnitsReply, error)
	// *
	// @description 此接口已废弃，建议使用RemovePermissionUnitV2
	RemovePermissionUnit(context.Context, *PermissionUnitRequest) (*PermissionUnitReply, error)
	RemovePermissionUnits(context.Context, *PermissionUnitsRequest) (*PermissionUnitsReply, error)
	// *
	// @description 在指定的域下添加一个或多个权限单元V2，一个权限单元V2包含一个用户，一个角色类型，若干权限，一个资源
	// @params permissionUnitsV2，权限单元V2，一个权限单元V2包含一个用户，一个角色类型，若干权限，含义为一个用户因为某个角色类型对某个资源拥有某些权限
	// @params checkExistFlag，当设定为True时，添加过程中将检查该用户是否已经拥有相应的角色，如果存在则不会重复添加，当设定为False时，添加过程中将不会检查该用户是否已经拥有相应的角色，通常用于批量添加
	// @return 返回实际添加的权限单元数量
	// @addition 同时添加多个权限单元时，建议通过批量接口进行添加，以提高效率
	AddPermissionUnitV2(context.Context, *PermissionUnitV2Request) (*IntReply, error)
	AddPermissionUnitsV2(context.Context, *PermissionUnitsV2Request) (*IntReply, error)
	// *
	// @description 在指定的域下删除一个或多个权限单元V2，一个权限单元V2包含一个用户，一个角色类型，若干权限，一个资源
	// @params permissionUnitsV2，权限单元V2，一个权限单元V2包含一个用户，一个角色类型，若干权限，一个资源
	// @return 返回实际删除的权限单元数量
	// @addition 同时删除多个权限单元时，建议通过批量接口进行删除，以提高效率
	RemovePermissionUnitV2(context.Context, *PermissionUnitV2Request) (*IntReply, error)
	RemovePermissionUnitsV2(context.Context, *PermissionUnitsV2Request) (*IntReply, error)
	// *
	// @description 删除一个用户/角色实例直接相关所有相关的权限规则
	// @params userOrRole，用户或角色
	RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole(context.Context, *UserOrRoleRequest) (*EmptyReply, error)
	// *
	// @description 删除一个资源直接相关所有相关的权限规则，通常用于删除资源时使用
	// @params object，资源
	RemovePermissionUnitsV2AndGroupPoliciesForObject(context.Context, *ObjectRequest) (*EmptyReply, error)
	// *
	// @description 在指定的域下，获取某个用户或某个角色拥有的所有权限信息
	// @param userOrRole 用户或角色
	// @param searchChildObjectsFlag 是否搜索子资源
	// @param maxSearchChildObjectsLevel 最大搜索子资源的层数
	// @return 返回权限信息，包含p规则（角色实例对资源的权限），用户组规则（用户、用户组和角色实例的继承关系）和资源组规则（资源、资源组的继承关系）
	GetPermissionInfoForUserOrRole(context.Context, *UserOrRoleWithFlagRequest) (*PermissionInfoReply, error)
	// *
	// @description 在指定的域下，获取某个资源拥有的所有权限信息
	// @param object 资源
	// @param searchChildUsersOrRolesFlag 是否搜索子用户或角色
	// @param maxSearchChildUsersOrRolesLevel 最大搜索子用户或角色的层数
	// @return 返回权限信息，包含p规则（角色实例对资源的权限），用户组规则（用户、用户组和角色实例的继承关系）和资源组规则（资源、资源组的继承关系）
	GetPermissionInfoForObject(context.Context, *ObjectWithFlagRequest) (*PermissionInfoReply, error)
	// *
	// @description 在指定的域下，获取某个用户和某个资源拥有的所有权限信息
	// @param userOrRole 用户或角色
	// @param object 资源
	// @return 返回权限信息，包含p规则（角色实例对资源的权限），用户组规则（用户、用户组和角色实例的继承关系）和资源组规则（资源、资源组的继承关系）
	// @addition 此接口仅返回同时与指定用户和指定资源相关的权限信息
	GetPermissionInfoForUserOrRoleAndObject(context.Context, *UserOrRoleAndObjectRequest) (*PermissionInfoReply, error)
	// *
	// @description 在指定的域下，将一个用户或角色实例的权限复制到另一个用户或角色实例
	// @param oldUserOrRole 被复制的用户或角色
	// @param newUserOrRole 复制到的用户或角色
	// @return oldUserOrRole拥有的所有权限信息，不含物体组信息
	// @addition 系统将使用浅复制，不创建新的角色实例，而是直接将权限规则进行替换
	// @addition 调用时，输入的oldUserOrRole必须在用户树上为叶子节点，尝试替换非叶子节点将直接报错
	ReplacePermissionInfoForUserOrRole(context.Context, *ReplacePermissionInfoForUserOrRoleRequest) (*PermissionInfoReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 权限 + 资源类型 -> 资源列表
	// @param user 用户或角色
	// @param permission 权限
	// @param objectCls 资源类型，不允许为空
	// @param objectGroup 资源组，限定搜索范围，如果为空，则不限制资源组，否则只会搜索指定资源组的资源
	// @return 返回用户有权限的资源列表
	GetObjectsForUserWithPermission(context.Context, *AclSearchRequest) (*ArrayReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 权限 + 资源类型 -> 资源列表
	// @param user 用户或角色
	// @param permissions 权限列表，允许指定多个权限，只需要用户拥有其中一个权限即认为用户有权限
	// @param objectCls 资源类型，不允许为空
	// @param objectGroup 资源组，限定搜索范围，如果为空，则不限制资源组，否则只会搜索指定资源组的资源
	// @param searchChildObjectsFlag 是否递归搜索子资源
	// @param reverseObjectsFlag 是否反转资源搜索路径，反转后，用户会因为对子资源有权限而被认为对父资源也有权限
	// @return 返回用户有权限的资源列表
	// @addition 此接口是对上一接口的扩展，可以指定多个权限进行类似or的拼接，可以选择是否递归搜索子资源，可以反转资源权限搜索路径
	GetObjectsForUserWithPermissionsEx(context.Context, *AclSearchExRequest) (*ArrayReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 权限 + 根资源（可选） + 搜索方向 + 搜索限制（可选） -> 资源树
	// @param user 用户或角色
	// @param permissions 权限列表，允许指定多个权限，只需要用户拥有其中一个权限即认为用户有权限
	// @param object 根资源，搜索的起点，如果为空，则会搜索用户所有有权限的资源，否则根据搜索方向从根资源开始匹配用户有权限的资源
	// @param reverseObjectsFlag 是否反转资源搜索结果，反转后，用户会因为对子资源有权限而被认为对父资源也有权限
	// @param objectClsPatterns 指定资源类型的列表，如果为空，则不限制资源类型，否则只会搜索指定类型的资源
	// @return 以树结构返回的资源列表
	// @addition 此接口主要用于搜索用户的资源树，将以树的结构返回用户有权限的资源，非常适合需要在前端展示用户有权限的资源树的场景
	GetObjectTreesForUserWithPermissions(context.Context, *AclSearchForObjectTreesRequest) (*GroupPoliciesReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 资源 -> 权限列表
	// @param user 用户或角色
	// @param object 资源
	// @return 权限列表
	GetPermissionsForUserWithObject(context.Context, *AclSearchRequest) (*ArrayReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 资源 -> 权限列表
	// @param user 用户或角色
	// @param objects 资源列表
	// @return 针对每一个资源的权限列表
	// @addition 此接口是对上一接口的扩展，可以指定多个资源，返回针对每一个资源的权限列表
	GetPermissionsForUserWithObjectsEx(context.Context, *AclSearchExRequest) (*PermissionsWithObjectListReply, error)
	// *
	// @description 类似ACL的接口，权限 + 资源 -> 用户和角色列表
	// @param object 资源列表
	// @param permission 权限
	// @return 拥有权限的用户
	GetUsersOrRolesForObjectWithPermission(context.Context, *AclSearchRequest) (*ArrayReply, error)
	// *
	// @description 类似ACL的接口，用户/角色 + 权限 + 资源 -> 二元判断
	// @param user 用户或角色
	// @param permission 权限
	// @param object 资源
	// @return 用户是否对指定的资源拥有相应的权限
	CheckPermission(context.Context, *AclSearchRequest) (*BoolReply, error)
	BatchCheckPermission(context.Context, *BatchAclSearchRequest) (*BoolArrayReply, error)
	// *
	// @description 资源查询的接口，用户 + 角色类型 + 资源类型 -> 资源列表
	// @param user 用户或角色
	// @param roleCls 角色类型
	// @return 用户拥有特定角色类型的资源列表
	GetObjectsForUserWithRoleCls(context.Context, *RoleSearchRequest) (*ArrayReply, error)
	// *
	// @description 角色查询的接口，用户 + 资源 -> 角色列表
	// @param user 用户或角色
	// @param object 资源
	// @return 特定资源和用户相关的角色实例列表
	GetRolesForUserWithObject(context.Context, *RoleSearchRequest) (*ArrayReply, error)
	// *
	// @description 用户的查询接口，角色类型 + 资源 -> 用户或角色列表
	// @param roleCls 角色类型
	// @param object 资源
	// @return 哪些用户对资源拥有特定的角色
	GetUsersOrRolesForObjectWithRoleCls(context.Context, *RoleSearchRequest) (*ArrayReply, error)
	// *
	// @description 二元判断接口，用户 + 角色类型 + 资源 -> 二元判断
	// @param user 用户或角色
	// @param roleCls 角色类型
	// @param object 资源
	// @return 用户是否具有特定的角色
	CheckRole(context.Context, *RoleSearchRequest) (*BoolReply, error)
	// *
	// @description 在指定的域下添加角色继承关系，或用户继承关系，或用户和角色的绑定关系。
	// @param child，子用户
	// @param parent，父用户，通常是用户组或者角色实例
	// @return 返回是否添加成功
	// @addition 允许多级别嵌套，但是最高不能超过10级
	// @addition 添加过程本身是幂等的，重复添加不会产生多个权限规则
	AddUserOrRoleForUserOrRole(context.Context, *GroupPolicyRequest) (*BoolReply, error)
	AddUsersOrRolesForUsersOrRoles(context.Context, *GroupPoliciesRequest) (*BoolReply, error)
	// *
	// @description 在指定的域下删除角色继承关系，或用户继承关系，或用户和角色的绑定关系。
	// @param child，子用户
	// @param parent，父用户，通常是用户组或者角色实例
	// @return 返回是否删除成功
	// @addition 删除过程本身是幂等的，重复删除不会报错，而是返回false
	RemoveUserOrRoleForUserOrRole(context.Context, *GroupPolicyRequest) (*BoolReply, error)
	RemoveUsersOrRolesForUsersOrRoles(context.Context, *GroupPoliciesRequest) (*BoolReply, error)
	// *
	// @description 获取指定的用户或角色的所有父用户和父角色，child->parents
	// @param userOrRole，用户或角色
	// @return 返回从当前用户或角色开始的继承树
	// @addition 会返回所有具有继承了该角色的所有角色和用户，需要自行根据前缀区分
	GetUsersOrRolesForUserOrRole(context.Context, *UserOrRoleRequest) (*GroupPoliciesReply, error)
	GetUsersOrRolesForUsersOrRoles(context.Context, *UsersOrRolesRequest) (*GroupPoliciesWithRootListReply, error)
	// *
	// @description 获取指定的用户或角色的所有子用户和角色, parent->children
	// @param userOrRole，用户或角色
	// @return 返回从当前节点开始的继承树
	// @addition 会返回所有具有继承了该角色的所有角色和用户，需要自行根据前缀区分
	GetUsersOrRolesInUserOrRole(context.Context, *UserOrRoleRequest) (*GroupPoliciesReply, error)
	GetUsersOrRolesInUsersOrRoles(context.Context, *UsersOrRolesRequest) (*GroupPoliciesWithRootListReply, error)
	// *
	// @description 获取指定的用户或角色的所有父用户和父角色，child->parents
	// @param userOrRole，用户或角色
	// @param userOrRoleClsPatterns，匹配规则
	// @return 返回从当前节点开始的继承树
	// @addition 会返回所有具有继承了该角色的所有角色和用户，需要自行根据前缀区分
	// @addition 此接口是对上一接口的扩展，自动按照广度优先进行级联搜索，完成搜索后按照指定的pattern对搜索结果进行过滤，只返回匹配的用户和角色，比如搜索到/u/user_group/1 -> /u/user/1 -> /u/sub_user/1，如果pattern为/u/user_group/ -> /u/user，则只返回/u/user_group/1 -> /u/user/1，需要匹配的路径必须是一个长度大于2的列表
	GetUsersOrRolesForUserOrRoleWithPattern(context.Context, *UserOrRoleWithPatternRequest) (*GroupPoliciesReply, error)
	// *
	// @description 获取继承了指定的用户或角色的所有用户和角色, parent->children
	// @param userOrRole，用户或角色
	// @param userOrRoleClsPatterns，匹配规则
	// @return 返回从当前节点开始的继承树
	// @addition 会返回所有具有继承了该角色的所有角色和用户，需要自行根据前缀区分
	// @addition 自动按照广度优先进行级联搜索，完成搜索后按照指定的pattern对搜索结果进行过滤，只返回匹配的用户和角色，比如搜索到/u/user_group/1 -> /u/user/1 -> /u/sub_user/1，如果pattern为/u/user_group/ -> /u/user，则只返回/u/user_group/1 -> /u/user/1，需要匹配的路径必须是一个长度大于2的列表
	GetUsersOrRolesInUserOrRoleWithPattern(context.Context, *UserOrRoleWithPatternRequest) (*GroupPoliciesReply, error)
	// *
	// @description 在指定的域下添加资源继承关系
	// @param child，子物体
	// @parma parent，父物体
	// @return 返回是否添加成功
	// @addition 允许多级别嵌套，但是最高不能超过10级
	// @addition 添加过程本身是幂等的，重复添加不会产生多个权限规则
	AddObjectForObject(context.Context, *GroupPolicyRequest) (*BoolReply, error)
	AddObjectsForObjects(context.Context, *GroupPoliciesRequest) (*BoolReply, error)
	// *
	// @description 在指定的域下删除资源继承关系
	// @param child，子物体
	// @parma parent，父物体
	// @return 返回是否删除成功
	// @addition 允许多级别嵌套，但是最高不能超过10级
	// @addition 添加过程本身是幂等的，重复删除不会报错
	RemoveObjectForObject(context.Context, *GroupPolicyRequest) (*BoolReply, error)
	RemoveObjectsForObjects(context.Context, *GroupPoliciesRequest) (*BoolReply, error)
	// *
	// @description 获取指定的物体的所有父物体，child->parents
	// @param object，物体
	// @return 返回从当前物体开始的继承树
	GetObjectsForObject(context.Context, *ObjectRequest) (*GroupPoliciesReply, error)
	GetObjectsForObjects(context.Context, *ObjectsRequest) (*GroupPoliciesWithRootListReply, error)
	// *
	// @description 获取指定的物体的所有子物体, parent->children
	// @param object，物体
	// @return 返回从当前物体开始的继承树
	GetObjectsInObject(context.Context, *ObjectRequest) (*GroupPoliciesReply, error)
	GetObjectsInObjects(context.Context, *ObjectsRequest) (*GroupPoliciesWithRootListReply, error)
	// *
	// @description 获取指定的物体的所有父物体，child->parents
	// @param object，物体
	// @param objectsPatterns，匹配规则
	// @return 返回从当前节点开始的继承树
	// @addition 自动按照广度优先进行级联搜索，完成搜索后按照指定的pattern对搜索结果进行过滤，只返回匹配的资源，比如搜索到/o/ci/idc/1 -> /o/ci/server_room/1 -> /o/ci/server/1，如果pattern为/o/ci/idc/ -> /o/ci/server_room/，则只返回/o/ci/idc/1 -> /o/ci/server_room/1，需要匹配的路径必须是一个长度大于2的列表
	GetObjectsForObjectWithPattern(context.Context, *ObjectWithPatternRequest) (*GroupPoliciesReply, error)
	// *
	// @description 获取指定的物体的所有子物体, parent->children
	// @param object，物体
	// @param objectsPatterns，匹配规则
	// @return 返回从当前节点开始的继承树
	// @addition 自动按照广度优先进行级联搜索，完成搜索后按照指定的pattern对搜索结果进行过滤，只返回匹配的资源，比如搜索到/o/ci/idc/1 -> /o/ci/server_room/1 -> /o/ci/server/1，如果pattern为/o/ci/idc/ -> /o/ci/server_room/，则只返回/o/ci/idc/1 -> /o/ci/server_room/1，需要匹配的路径必须是一个长度大于2的列表
	GetObjectsInObjectWithPattern(context.Context, *ObjectWithPatternRequest) (*GroupPoliciesReply, error)
	// *
	// @description 在指定的域下添加一个“角色权限单元”，预先绑定某些物体
	// @param rolePermissionUnit.role，角色实例
	// @param rolePermissionUnit.roleCls，角色类型，与角色实例只需要指定一个，当角色实例为空时，则会通过角色类型构造角色实例
	// @param rolePermissionUnit.permissionsWithObject，角色对哪些物体拥有什么权限
	// @param replace，为True时，向同一个角色重复添加规则将删除原有的规则，否则只新增规则
	// @return 返回权限有新增的角色
	// @addition 完成预制角色添加后，可以使用AddUserOrRoleForUserOrRole将角色实例绑定至用户
	AddRolePermissionUnit(context.Context, *RolePermissionUnitRequest) (*RolePermissionUnitReply, error)
	// *
	// @description 在指定的域下删除“角色权限单元”
	// @param userOrRole，角色实例
	// @return 返回是否删除成功
	// @addition 删除过程中不校验角色是否存在，删除一个不存在的角色权限单元并不会导致报错
	RemoveRolePermissionUnit(context.Context, *UserOrRoleRequest) (*BoolReply, error)
	RemoveRolePermissionUnits(context.Context, *UsersOrRolesRequest) (*BoolReply, error)
	// *
	// @description 检查当前的enforcer是否为master
	IsMaster(context.Context, *EmptyRequest) (*BoolReply, error)
	// *
	// @description 向Redis强制同步保存一次策略
	SavePolicy(context.Context, *EmptyRequest) (*BoolReply, error)
	// *
	// @description 删除指定domain的策略
	RemoveDomainPolicies(context.Context, *EmptyRequest) (*BoolReply, error)
	// *
	// @description 给指定域添加配置
	AddDomainConfig(context.Context, *DomainConfigRequest) (*BoolReply, error)
	// *
	// @description 获取指定域的配置
	GetDomainConfig(context.Context, *EmptyRequest) (*DomainConfigReply, error)
	// *
	// @description 删除指定域的配置
	RemoveDomainConfig(context.Context, *EmptyRequest) (*BoolReply, error)
	// *
	// @description 给token添加指定域的权限
	AddTokenAccessForDomain(context.Context, *TokenAccessRequest) (*BoolReply, error)
	// *
	// @description 获取全部token的权限列表
	GetTokenAccessList(context.Context, *EmptyRequest) (*TokenAccessListReply, error)
	// *
	// @description 删除token对指定域的权限
	RemoveTokenAccessForDomain(context.Context, *TokenAccessRequest) (*BoolReply, error)
}

// UnimplementedCasbinServer should be embedded to have forward compatible implementations.
type UnimplementedCasbinServer struct {
}

func (UnimplementedCasbinServer) AddPermissionUnit(context.Context, *PermissionUnitRequest) (*PermissionUnitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionUnit not implemented")
}
func (UnimplementedCasbinServer) AddPermissionUnits(context.Context, *PermissionUnitsRequest) (*PermissionUnitsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionUnits not implemented")
}
func (UnimplementedCasbinServer) RemovePermissionUnit(context.Context, *PermissionUnitRequest) (*PermissionUnitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionUnit not implemented")
}
func (UnimplementedCasbinServer) RemovePermissionUnits(context.Context, *PermissionUnitsRequest) (*PermissionUnitsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionUnits not implemented")
}
func (UnimplementedCasbinServer) AddPermissionUnitV2(context.Context, *PermissionUnitV2Request) (*IntReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionUnitV2 not implemented")
}
func (UnimplementedCasbinServer) AddPermissionUnitsV2(context.Context, *PermissionUnitsV2Request) (*IntReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionUnitsV2 not implemented")
}
func (UnimplementedCasbinServer) RemovePermissionUnitV2(context.Context, *PermissionUnitV2Request) (*IntReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionUnitV2 not implemented")
}
func (UnimplementedCasbinServer) RemovePermissionUnitsV2(context.Context, *PermissionUnitsV2Request) (*IntReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionUnitsV2 not implemented")
}
func (UnimplementedCasbinServer) RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole(context.Context, *UserOrRoleRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole not implemented")
}
func (UnimplementedCasbinServer) RemovePermissionUnitsV2AndGroupPoliciesForObject(context.Context, *ObjectRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionUnitsV2AndGroupPoliciesForObject not implemented")
}
func (UnimplementedCasbinServer) GetPermissionInfoForUserOrRole(context.Context, *UserOrRoleWithFlagRequest) (*PermissionInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionInfoForUserOrRole not implemented")
}
func (UnimplementedCasbinServer) GetPermissionInfoForObject(context.Context, *ObjectWithFlagRequest) (*PermissionInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionInfoForObject not implemented")
}
func (UnimplementedCasbinServer) GetPermissionInfoForUserOrRoleAndObject(context.Context, *UserOrRoleAndObjectRequest) (*PermissionInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionInfoForUserOrRoleAndObject not implemented")
}
func (UnimplementedCasbinServer) ReplacePermissionInfoForUserOrRole(context.Context, *ReplacePermissionInfoForUserOrRoleRequest) (*PermissionInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplacePermissionInfoForUserOrRole not implemented")
}
func (UnimplementedCasbinServer) GetObjectsForUserWithPermission(context.Context, *AclSearchRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsForUserWithPermission not implemented")
}
func (UnimplementedCasbinServer) GetObjectsForUserWithPermissionsEx(context.Context, *AclSearchExRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsForUserWithPermissionsEx not implemented")
}
func (UnimplementedCasbinServer) GetObjectTreesForUserWithPermissions(context.Context, *AclSearchForObjectTreesRequest) (*GroupPoliciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectTreesForUserWithPermissions not implemented")
}
func (UnimplementedCasbinServer) GetPermissionsForUserWithObject(context.Context, *AclSearchRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionsForUserWithObject not implemented")
}
func (UnimplementedCasbinServer) GetPermissionsForUserWithObjectsEx(context.Context, *AclSearchExRequest) (*PermissionsWithObjectListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionsForUserWithObjectsEx not implemented")
}
func (UnimplementedCasbinServer) GetUsersOrRolesForObjectWithPermission(context.Context, *AclSearchRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOrRolesForObjectWithPermission not implemented")
}
func (UnimplementedCasbinServer) CheckPermission(context.Context, *AclSearchRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedCasbinServer) BatchCheckPermission(context.Context, *BatchAclSearchRequest) (*BoolArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckPermission not implemented")
}
func (UnimplementedCasbinServer) GetObjectsForUserWithRoleCls(context.Context, *RoleSearchRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsForUserWithRoleCls not implemented")
}
func (UnimplementedCasbinServer) GetRolesForUserWithObject(context.Context, *RoleSearchRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUserWithObject not implemented")
}
func (UnimplementedCasbinServer) GetUsersOrRolesForObjectWithRoleCls(context.Context, *RoleSearchRequest) (*ArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOrRolesForObjectWithRoleCls not implemented")
}
func (UnimplementedCasbinServer) CheckRole(context.Context, *RoleSearchRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRole not implemented")
}
func (UnimplementedCasbinServer) AddUserOrRoleForUserOrRole(context.Context, *GroupPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserOrRoleForUserOrRole not implemented")
}
func (UnimplementedCasbinServer) AddUsersOrRolesForUsersOrRoles(context.Context, *GroupPoliciesRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersOrRolesForUsersOrRoles not implemented")
}
func (UnimplementedCasbinServer) RemoveUserOrRoleForUserOrRole(context.Context, *GroupPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserOrRoleForUserOrRole not implemented")
}
func (UnimplementedCasbinServer) RemoveUsersOrRolesForUsersOrRoles(context.Context, *GroupPoliciesRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsersOrRolesForUsersOrRoles not implemented")
}
func (UnimplementedCasbinServer) GetUsersOrRolesForUserOrRole(context.Context, *UserOrRoleRequest) (*GroupPoliciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOrRolesForUserOrRole not implemented")
}
func (UnimplementedCasbinServer) GetUsersOrRolesForUsersOrRoles(context.Context, *UsersOrRolesRequest) (*GroupPoliciesWithRootListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOrRolesForUsersOrRoles not implemented")
}
func (UnimplementedCasbinServer) GetUsersOrRolesInUserOrRole(context.Context, *UserOrRoleRequest) (*GroupPoliciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOrRolesInUserOrRole not implemented")
}
func (UnimplementedCasbinServer) GetUsersOrRolesInUsersOrRoles(context.Context, *UsersOrRolesRequest) (*GroupPoliciesWithRootListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOrRolesInUsersOrRoles not implemented")
}
func (UnimplementedCasbinServer) GetUsersOrRolesForUserOrRoleWithPattern(context.Context, *UserOrRoleWithPatternRequest) (*GroupPoliciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOrRolesForUserOrRoleWithPattern not implemented")
}
func (UnimplementedCasbinServer) GetUsersOrRolesInUserOrRoleWithPattern(context.Context, *UserOrRoleWithPatternRequest) (*GroupPoliciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOrRolesInUserOrRoleWithPattern not implemented")
}
func (UnimplementedCasbinServer) AddObjectForObject(context.Context, *GroupPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObjectForObject not implemented")
}
func (UnimplementedCasbinServer) AddObjectsForObjects(context.Context, *GroupPoliciesRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObjectsForObjects not implemented")
}
func (UnimplementedCasbinServer) RemoveObjectForObject(context.Context, *GroupPolicyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObjectForObject not implemented")
}
func (UnimplementedCasbinServer) RemoveObjectsForObjects(context.Context, *GroupPoliciesRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObjectsForObjects not implemented")
}
func (UnimplementedCasbinServer) GetObjectsForObject(context.Context, *ObjectRequest) (*GroupPoliciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsForObject not implemented")
}
func (UnimplementedCasbinServer) GetObjectsForObjects(context.Context, *ObjectsRequest) (*GroupPoliciesWithRootListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsForObjects not implemented")
}
func (UnimplementedCasbinServer) GetObjectsInObject(context.Context, *ObjectRequest) (*GroupPoliciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsInObject not implemented")
}
func (UnimplementedCasbinServer) GetObjectsInObjects(context.Context, *ObjectsRequest) (*GroupPoliciesWithRootListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsInObjects not implemented")
}
func (UnimplementedCasbinServer) GetObjectsForObjectWithPattern(context.Context, *ObjectWithPatternRequest) (*GroupPoliciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsForObjectWithPattern not implemented")
}
func (UnimplementedCasbinServer) GetObjectsInObjectWithPattern(context.Context, *ObjectWithPatternRequest) (*GroupPoliciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsInObjectWithPattern not implemented")
}
func (UnimplementedCasbinServer) AddRolePermissionUnit(context.Context, *RolePermissionUnitRequest) (*RolePermissionUnitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolePermissionUnit not implemented")
}
func (UnimplementedCasbinServer) RemoveRolePermissionUnit(context.Context, *UserOrRoleRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRolePermissionUnit not implemented")
}
func (UnimplementedCasbinServer) RemoveRolePermissionUnits(context.Context, *UsersOrRolesRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRolePermissionUnits not implemented")
}
func (UnimplementedCasbinServer) IsMaster(context.Context, *EmptyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMaster not implemented")
}
func (UnimplementedCasbinServer) SavePolicy(context.Context, *EmptyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePolicy not implemented")
}
func (UnimplementedCasbinServer) RemoveDomainPolicies(context.Context, *EmptyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDomainPolicies not implemented")
}
func (UnimplementedCasbinServer) AddDomainConfig(context.Context, *DomainConfigRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDomainConfig not implemented")
}
func (UnimplementedCasbinServer) GetDomainConfig(context.Context, *EmptyRequest) (*DomainConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainConfig not implemented")
}
func (UnimplementedCasbinServer) RemoveDomainConfig(context.Context, *EmptyRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDomainConfig not implemented")
}
func (UnimplementedCasbinServer) AddTokenAccessForDomain(context.Context, *TokenAccessRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTokenAccessForDomain not implemented")
}
func (UnimplementedCasbinServer) GetTokenAccessList(context.Context, *EmptyRequest) (*TokenAccessListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenAccessList not implemented")
}
func (UnimplementedCasbinServer) RemoveTokenAccessForDomain(context.Context, *TokenAccessRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTokenAccessForDomain not implemented")
}

// UnsafeCasbinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasbinServer will
// result in compilation errors.
type UnsafeCasbinServer interface {
	mustEmbedUnimplementedCasbinServer()
}

func RegisterCasbinServer(s grpc.ServiceRegistrar, srv CasbinServer) {
	s.RegisterService(&Casbin_ServiceDesc, srv)
}

func _Casbin_AddPermissionUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddPermissionUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddPermissionUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddPermissionUnit(ctx, req.(*PermissionUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddPermissionUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddPermissionUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddPermissionUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddPermissionUnits(ctx, req.(*PermissionUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemovePermissionUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemovePermissionUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemovePermissionUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemovePermissionUnit(ctx, req.(*PermissionUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemovePermissionUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemovePermissionUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemovePermissionUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemovePermissionUnits(ctx, req.(*PermissionUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddPermissionUnitV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUnitV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddPermissionUnitV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddPermissionUnitV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddPermissionUnitV2(ctx, req.(*PermissionUnitV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddPermissionUnitsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUnitsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddPermissionUnitsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddPermissionUnitsV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddPermissionUnitsV2(ctx, req.(*PermissionUnitsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemovePermissionUnitV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUnitV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemovePermissionUnitV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemovePermissionUnitV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemovePermissionUnitV2(ctx, req.(*PermissionUnitV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemovePermissionUnitsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUnitsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemovePermissionUnitsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemovePermissionUnitsV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemovePermissionUnitsV2(ctx, req.(*PermissionUnitsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole(ctx, req.(*UserOrRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemovePermissionUnitsV2AndGroupPoliciesForObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemovePermissionUnitsV2AndGroupPoliciesForObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemovePermissionUnitsV2AndGroupPoliciesForObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemovePermissionUnitsV2AndGroupPoliciesForObject(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetPermissionInfoForUserOrRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrRoleWithFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetPermissionInfoForUserOrRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetPermissionInfoForUserOrRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetPermissionInfoForUserOrRole(ctx, req.(*UserOrRoleWithFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetPermissionInfoForObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectWithFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetPermissionInfoForObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetPermissionInfoForObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetPermissionInfoForObject(ctx, req.(*ObjectWithFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetPermissionInfoForUserOrRoleAndObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrRoleAndObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetPermissionInfoForUserOrRoleAndObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetPermissionInfoForUserOrRoleAndObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetPermissionInfoForUserOrRoleAndObject(ctx, req.(*UserOrRoleAndObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_ReplacePermissionInfoForUserOrRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplacePermissionInfoForUserOrRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).ReplacePermissionInfoForUserOrRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_ReplacePermissionInfoForUserOrRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).ReplacePermissionInfoForUserOrRole(ctx, req.(*ReplacePermissionInfoForUserOrRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetObjectsForUserWithPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetObjectsForUserWithPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetObjectsForUserWithPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetObjectsForUserWithPermission(ctx, req.(*AclSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetObjectsForUserWithPermissionsEx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclSearchExRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetObjectsForUserWithPermissionsEx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetObjectsForUserWithPermissionsEx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetObjectsForUserWithPermissionsEx(ctx, req.(*AclSearchExRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetObjectTreesForUserWithPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclSearchForObjectTreesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetObjectTreesForUserWithPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetObjectTreesForUserWithPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetObjectTreesForUserWithPermissions(ctx, req.(*AclSearchForObjectTreesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetPermissionsForUserWithObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetPermissionsForUserWithObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetPermissionsForUserWithObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetPermissionsForUserWithObject(ctx, req.(*AclSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetPermissionsForUserWithObjectsEx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclSearchExRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetPermissionsForUserWithObjectsEx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetPermissionsForUserWithObjectsEx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetPermissionsForUserWithObjectsEx(ctx, req.(*AclSearchExRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetUsersOrRolesForObjectWithPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetUsersOrRolesForObjectWithPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetUsersOrRolesForObjectWithPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetUsersOrRolesForObjectWithPermission(ctx, req.(*AclSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).CheckPermission(ctx, req.(*AclSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_BatchCheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAclSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).BatchCheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_BatchCheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).BatchCheckPermission(ctx, req.(*BatchAclSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetObjectsForUserWithRoleCls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetObjectsForUserWithRoleCls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetObjectsForUserWithRoleCls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetObjectsForUserWithRoleCls(ctx, req.(*RoleSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetRolesForUserWithObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetRolesForUserWithObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetRolesForUserWithObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetRolesForUserWithObject(ctx, req.(*RoleSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetUsersOrRolesForObjectWithRoleCls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetUsersOrRolesForObjectWithRoleCls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetUsersOrRolesForObjectWithRoleCls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetUsersOrRolesForObjectWithRoleCls(ctx, req.(*RoleSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_CheckRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).CheckRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_CheckRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).CheckRole(ctx, req.(*RoleSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddUserOrRoleForUserOrRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddUserOrRoleForUserOrRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddUserOrRoleForUserOrRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddUserOrRoleForUserOrRole(ctx, req.(*GroupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddUsersOrRolesForUsersOrRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddUsersOrRolesForUsersOrRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddUsersOrRolesForUsersOrRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddUsersOrRolesForUsersOrRoles(ctx, req.(*GroupPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveUserOrRoleForUserOrRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveUserOrRoleForUserOrRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveUserOrRoleForUserOrRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveUserOrRoleForUserOrRole(ctx, req.(*GroupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveUsersOrRolesForUsersOrRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveUsersOrRolesForUsersOrRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveUsersOrRolesForUsersOrRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveUsersOrRolesForUsersOrRoles(ctx, req.(*GroupPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetUsersOrRolesForUserOrRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetUsersOrRolesForUserOrRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetUsersOrRolesForUserOrRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetUsersOrRolesForUserOrRole(ctx, req.(*UserOrRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetUsersOrRolesForUsersOrRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersOrRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetUsersOrRolesForUsersOrRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetUsersOrRolesForUsersOrRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetUsersOrRolesForUsersOrRoles(ctx, req.(*UsersOrRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetUsersOrRolesInUserOrRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetUsersOrRolesInUserOrRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetUsersOrRolesInUserOrRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetUsersOrRolesInUserOrRole(ctx, req.(*UserOrRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetUsersOrRolesInUsersOrRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersOrRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetUsersOrRolesInUsersOrRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetUsersOrRolesInUsersOrRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetUsersOrRolesInUsersOrRoles(ctx, req.(*UsersOrRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetUsersOrRolesForUserOrRoleWithPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrRoleWithPatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetUsersOrRolesForUserOrRoleWithPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetUsersOrRolesForUserOrRoleWithPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetUsersOrRolesForUserOrRoleWithPattern(ctx, req.(*UserOrRoleWithPatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetUsersOrRolesInUserOrRoleWithPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrRoleWithPatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetUsersOrRolesInUserOrRoleWithPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetUsersOrRolesInUserOrRoleWithPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetUsersOrRolesInUserOrRoleWithPattern(ctx, req.(*UserOrRoleWithPatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddObjectForObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddObjectForObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddObjectForObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddObjectForObject(ctx, req.(*GroupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddObjectsForObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddObjectsForObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddObjectsForObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddObjectsForObjects(ctx, req.(*GroupPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveObjectForObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveObjectForObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveObjectForObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveObjectForObject(ctx, req.(*GroupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveObjectsForObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveObjectsForObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveObjectsForObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveObjectsForObjects(ctx, req.(*GroupPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetObjectsForObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetObjectsForObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetObjectsForObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetObjectsForObject(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetObjectsForObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetObjectsForObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetObjectsForObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetObjectsForObjects(ctx, req.(*ObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetObjectsInObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetObjectsInObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetObjectsInObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetObjectsInObject(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetObjectsInObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetObjectsInObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetObjectsInObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetObjectsInObjects(ctx, req.(*ObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetObjectsForObjectWithPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectWithPatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetObjectsForObjectWithPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetObjectsForObjectWithPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetObjectsForObjectWithPattern(ctx, req.(*ObjectWithPatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetObjectsInObjectWithPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectWithPatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetObjectsInObjectWithPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetObjectsInObjectWithPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetObjectsInObjectWithPattern(ctx, req.(*ObjectWithPatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddRolePermissionUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddRolePermissionUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddRolePermissionUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddRolePermissionUnit(ctx, req.(*RolePermissionUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveRolePermissionUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveRolePermissionUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveRolePermissionUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveRolePermissionUnit(ctx, req.(*UserOrRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveRolePermissionUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersOrRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveRolePermissionUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveRolePermissionUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveRolePermissionUnits(ctx, req.(*UsersOrRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_IsMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).IsMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_IsMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).IsMaster(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_SavePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).SavePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_SavePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).SavePolicy(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveDomainPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveDomainPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveDomainPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveDomainPolicies(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddDomainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddDomainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddDomainConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddDomainConfig(ctx, req.(*DomainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetDomainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetDomainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetDomainConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetDomainConfig(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveDomainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveDomainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveDomainConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveDomainConfig(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_AddTokenAccessForDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).AddTokenAccessForDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_AddTokenAccessForDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).AddTokenAccessForDomain(ctx, req.(*TokenAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_GetTokenAccessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).GetTokenAccessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_GetTokenAccessList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).GetTokenAccessList(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casbin_RemoveTokenAccessForDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinServer).RemoveTokenAccessForDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Casbin_RemoveTokenAccessForDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinServer).RemoveTokenAccessForDomain(ctx, req.(*TokenAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Casbin_ServiceDesc is the grpc.ServiceDesc for Casbin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Casbin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Casbin",
	HandlerType: (*CasbinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPermissionUnit",
			Handler:    _Casbin_AddPermissionUnit_Handler,
		},
		{
			MethodName: "AddPermissionUnits",
			Handler:    _Casbin_AddPermissionUnits_Handler,
		},
		{
			MethodName: "RemovePermissionUnit",
			Handler:    _Casbin_RemovePermissionUnit_Handler,
		},
		{
			MethodName: "RemovePermissionUnits",
			Handler:    _Casbin_RemovePermissionUnits_Handler,
		},
		{
			MethodName: "AddPermissionUnitV2",
			Handler:    _Casbin_AddPermissionUnitV2_Handler,
		},
		{
			MethodName: "AddPermissionUnitsV2",
			Handler:    _Casbin_AddPermissionUnitsV2_Handler,
		},
		{
			MethodName: "RemovePermissionUnitV2",
			Handler:    _Casbin_RemovePermissionUnitV2_Handler,
		},
		{
			MethodName: "RemovePermissionUnitsV2",
			Handler:    _Casbin_RemovePermissionUnitsV2_Handler,
		},
		{
			MethodName: "RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole",
			Handler:    _Casbin_RemovePermissionUnitsV2AndGroupPoliciesForUserOrRole_Handler,
		},
		{
			MethodName: "RemovePermissionUnitsV2AndGroupPoliciesForObject",
			Handler:    _Casbin_RemovePermissionUnitsV2AndGroupPoliciesForObject_Handler,
		},
		{
			MethodName: "GetPermissionInfoForUserOrRole",
			Handler:    _Casbin_GetPermissionInfoForUserOrRole_Handler,
		},
		{
			MethodName: "GetPermissionInfoForObject",
			Handler:    _Casbin_GetPermissionInfoForObject_Handler,
		},
		{
			MethodName: "GetPermissionInfoForUserOrRoleAndObject",
			Handler:    _Casbin_GetPermissionInfoForUserOrRoleAndObject_Handler,
		},
		{
			MethodName: "ReplacePermissionInfoForUserOrRole",
			Handler:    _Casbin_ReplacePermissionInfoForUserOrRole_Handler,
		},
		{
			MethodName: "GetObjectsForUserWithPermission",
			Handler:    _Casbin_GetObjectsForUserWithPermission_Handler,
		},
		{
			MethodName: "GetObjectsForUserWithPermissionsEx",
			Handler:    _Casbin_GetObjectsForUserWithPermissionsEx_Handler,
		},
		{
			MethodName: "GetObjectTreesForUserWithPermissions",
			Handler:    _Casbin_GetObjectTreesForUserWithPermissions_Handler,
		},
		{
			MethodName: "GetPermissionsForUserWithObject",
			Handler:    _Casbin_GetPermissionsForUserWithObject_Handler,
		},
		{
			MethodName: "GetPermissionsForUserWithObjectsEx",
			Handler:    _Casbin_GetPermissionsForUserWithObjectsEx_Handler,
		},
		{
			MethodName: "GetUsersOrRolesForObjectWithPermission",
			Handler:    _Casbin_GetUsersOrRolesForObjectWithPermission_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _Casbin_CheckPermission_Handler,
		},
		{
			MethodName: "BatchCheckPermission",
			Handler:    _Casbin_BatchCheckPermission_Handler,
		},
		{
			MethodName: "GetObjectsForUserWithRoleCls",
			Handler:    _Casbin_GetObjectsForUserWithRoleCls_Handler,
		},
		{
			MethodName: "GetRolesForUserWithObject",
			Handler:    _Casbin_GetRolesForUserWithObject_Handler,
		},
		{
			MethodName: "GetUsersOrRolesForObjectWithRoleCls",
			Handler:    _Casbin_GetUsersOrRolesForObjectWithRoleCls_Handler,
		},
		{
			MethodName: "CheckRole",
			Handler:    _Casbin_CheckRole_Handler,
		},
		{
			MethodName: "AddUserOrRoleForUserOrRole",
			Handler:    _Casbin_AddUserOrRoleForUserOrRole_Handler,
		},
		{
			MethodName: "AddUsersOrRolesForUsersOrRoles",
			Handler:    _Casbin_AddUsersOrRolesForUsersOrRoles_Handler,
		},
		{
			MethodName: "RemoveUserOrRoleForUserOrRole",
			Handler:    _Casbin_RemoveUserOrRoleForUserOrRole_Handler,
		},
		{
			MethodName: "RemoveUsersOrRolesForUsersOrRoles",
			Handler:    _Casbin_RemoveUsersOrRolesForUsersOrRoles_Handler,
		},
		{
			MethodName: "GetUsersOrRolesForUserOrRole",
			Handler:    _Casbin_GetUsersOrRolesForUserOrRole_Handler,
		},
		{
			MethodName: "GetUsersOrRolesForUsersOrRoles",
			Handler:    _Casbin_GetUsersOrRolesForUsersOrRoles_Handler,
		},
		{
			MethodName: "GetUsersOrRolesInUserOrRole",
			Handler:    _Casbin_GetUsersOrRolesInUserOrRole_Handler,
		},
		{
			MethodName: "GetUsersOrRolesInUsersOrRoles",
			Handler:    _Casbin_GetUsersOrRolesInUsersOrRoles_Handler,
		},
		{
			MethodName: "GetUsersOrRolesForUserOrRoleWithPattern",
			Handler:    _Casbin_GetUsersOrRolesForUserOrRoleWithPattern_Handler,
		},
		{
			MethodName: "GetUsersOrRolesInUserOrRoleWithPattern",
			Handler:    _Casbin_GetUsersOrRolesInUserOrRoleWithPattern_Handler,
		},
		{
			MethodName: "AddObjectForObject",
			Handler:    _Casbin_AddObjectForObject_Handler,
		},
		{
			MethodName: "AddObjectsForObjects",
			Handler:    _Casbin_AddObjectsForObjects_Handler,
		},
		{
			MethodName: "RemoveObjectForObject",
			Handler:    _Casbin_RemoveObjectForObject_Handler,
		},
		{
			MethodName: "RemoveObjectsForObjects",
			Handler:    _Casbin_RemoveObjectsForObjects_Handler,
		},
		{
			MethodName: "GetObjectsForObject",
			Handler:    _Casbin_GetObjectsForObject_Handler,
		},
		{
			MethodName: "GetObjectsForObjects",
			Handler:    _Casbin_GetObjectsForObjects_Handler,
		},
		{
			MethodName: "GetObjectsInObject",
			Handler:    _Casbin_GetObjectsInObject_Handler,
		},
		{
			MethodName: "GetObjectsInObjects",
			Handler:    _Casbin_GetObjectsInObjects_Handler,
		},
		{
			MethodName: "GetObjectsForObjectWithPattern",
			Handler:    _Casbin_GetObjectsForObjectWithPattern_Handler,
		},
		{
			MethodName: "GetObjectsInObjectWithPattern",
			Handler:    _Casbin_GetObjectsInObjectWithPattern_Handler,
		},
		{
			MethodName: "AddRolePermissionUnit",
			Handler:    _Casbin_AddRolePermissionUnit_Handler,
		},
		{
			MethodName: "RemoveRolePermissionUnit",
			Handler:    _Casbin_RemoveRolePermissionUnit_Handler,
		},
		{
			MethodName: "RemoveRolePermissionUnits",
			Handler:    _Casbin_RemoveRolePermissionUnits_Handler,
		},
		{
			MethodName: "IsMaster",
			Handler:    _Casbin_IsMaster_Handler,
		},
		{
			MethodName: "SavePolicy",
			Handler:    _Casbin_SavePolicy_Handler,
		},
		{
			MethodName: "RemoveDomainPolicies",
			Handler:    _Casbin_RemoveDomainPolicies_Handler,
		},
		{
			MethodName: "AddDomainConfig",
			Handler:    _Casbin_AddDomainConfig_Handler,
		},
		{
			MethodName: "GetDomainConfig",
			Handler:    _Casbin_GetDomainConfig_Handler,
		},
		{
			MethodName: "RemoveDomainConfig",
			Handler:    _Casbin_RemoveDomainConfig_Handler,
		},
		{
			MethodName: "AddTokenAccessForDomain",
			Handler:    _Casbin_AddTokenAccessForDomain_Handler,
		},
		{
			MethodName: "GetTokenAccessList",
			Handler:    _Casbin_GetTokenAccessList_Handler,
		},
		{
			MethodName: "RemoveTokenAccessForDomain",
			Handler:    _Casbin_RemoveTokenAccessForDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/casbin.proto",
}
